name: Release Candidate Workflow
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Version candidate being released'
        required: true
      snapshot-version:
        description: 'Next snapshot version'
        required: true
      branch:
        description: 'Branch to release from'
        required: true
        default: 'master'
jobs:
  release:
    runs-on: ubuntu-18.04
    if: github.repository_owner == 'Apicurio'
    steps:
      - name: Checkout Code With Ref '${{ github.ref }}'
        uses: actions/checkout@v2

      - name: Log Metadata
        run: |
          echo "Releasing Apicurio Registry version ${{ github.event.inputs.release-version }} from branch ${{ github.event.inputs.branch }}"
          echo "Next Snapshot version will be ${{ github.event.inputs.snapshot-version }}"

      - name: Set up Node.js v12
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Set up JDK 11
        uses: AdoptOpenJDK/install-jdk@v1
        with:
          version: '11'
          architecture: x64

      - name: Set up settings.xml
        run: |
          pwd
          mkdir -p /home/runner/.m2
          chmod 755 /home/runner/.m2
          echo "<settings><servers><server><id>${{ secrets.OSSRH_ID }}</id><username>${{ secrets.OSSRH_USERNAME }}</username><password>${{ secrets.OSSRH_TOKEN }}</password></server></servers><profiles><profile><id>${{ secrets.OSSRH_ID }}</id><activation><activeByDefault>true</activeByDefault></activation><properties><gpg.executable>gpg</gpg.executable><gpg.passphrase>${{ secrets.GPG_PASSPHRASE}}</gpg.passphrase></properties></profile></profiles></settings>" > /home/runner/.m2/settings.xml
          cat /home/runner/.m2/settings.xml

      - name: Set up Gren
        run: npm install github-release-notes -g

      - name: Apicurio Registry Checkout
        run: |
          mkdir registry
          cd registry
          git init
          git config --global user.name "apicurio-ci"
          git config --global user.email "apicurio.ci@gmail.com"
          git remote add origin "https://apicurio-ci:${{ secrets.ACCESS_TOKEN }}@github.com/Apicurio/apicurio-registry.git"
          git fetch
          git checkout ${{ github.event.inputs.branch}}
          git branch --set-upstream-to=origin/${{ github.event.inputs.branch}}
          git pull

      - name: Apicurio Registry Examples Checkout
        run: |
          mkdir registry-examples
          cd registry-examples
          git init
          git config --global user.name "apicurio-ci"
          git config --global user.email "apicurio.ci@gmail.com"
          git remote add origin "https://apicurio-ci:${{ secrets.ACCESS_TOKEN }}@github.com/Apicurio/apicurio-registry-examples.git"
          git fetch
          git checkout ${{steps.metadata.outputs.branch}}
          git branch --set-upstream-to=origin/${{steps.metadata.outputs.branch}}
          git pull

      - name: Update Release Candidate Version ${{ github.event.inputs.release-version}}
        run: |
          cd registry
          mvn versions:set -DnewVersion=${{ github.event.inputs.release-version}} -DgenerateBackupPoms=false -DprocessAllModules=true
          sed -i  "s/version\:\s.*/version: \'${{ github.event.inputs.release-version}}\'/g" docs/antora.yml
          sed -i  "5s/\"version\"\:\s\".*\"/\"version\": \"${{ github.event.inputs.release-version}}\"/g" app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v2/openapi.json
          cd ../registry-examples
          mvn versions:set -DnewVersion=${{ github.event.inputs.release-version}} -DgenerateBackupPoms=false -DprocessAllModules=true
          mvn versions:set-property -Dproperty=apicurio-registry.version -DgenerateBackupPoms=false -DnewVersion=${{ github.event.inputs.release-version}}

      - name: Build Registry (All Variants)
        run: |
          cd registry
          mvn -N io.takari:maven:wrapper -Dmaven=3.6.3
          ./mvnw clean install -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -Pkafkasql -DskipTests  -Pmultitenancy -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5

      - name: Build Examples
        run: |
          cd registry-examples
          mvn -N io.takari:maven:wrapper -Dmaven=3.6.3
          ./mvnw clean install

      - name: Commit Release Version Change
        run: |
          cd registry
          git add .
          git commit -m "Automated update to Release Version:: ${{ github.event.inputs.release-version}}"
          git push
          cd ../registry-examples
          git add .
          git commit -m "Automated update to Release Version:: ${{ github.event.inputs.release-version}}"
          git push

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v1
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Fetch Latest Commit SHA For Apicurio Registry
        run: |
          cd registry
          echo "latest_commit_sha=$(git log -n 1 --pretty=format:"%H")" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.inputs.release-version}}       
          release_name: ${{ github.event.inputs.release-version}}
          commitish: ${{ env.latest_commit_sha }} # explicitly passing the commit hash so that the latest commit is tagged and released

      - name: Generate Release Notes
        run: |
          cd registry
          gren release --token=${{ secrets.GITHUB_TOKEN }} --override

      - name: Tag Examples
        run: |
          cd registry-examples
          git tag -a -m "Tagging release ${{ github.event.inputs.release-version}}" ${{ github.event.inputs.release-version}}
          git push origin ${{ github.event.inputs.release-version}}

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build The Release Docker Images
        run: ./.github/scripts/build-rc-images-for-docker.sh

      - name: List All The Tagged Docker Images
        run: docker images

      - name: Push The Release Docker Images To Dockerhub 
        run: ./.github/scripts/push-rc-images-to-docker.sh ${{ github.event.inputs.release-version}}

      - name: Login to Quay.io Registry
        run: docker login -u "${{ secrets.QUAY_USERNAME }}" -p "${{ secrets.QUAY_PASSWORD }}" quay.io

      - name: Tag Release Docker Images for Quay.io
        run: ./.github/scripts/tag-rc-images-for-quay.sh ${{ github.event.inputs.release-version}}

      - name: List All The Tagged Docker Images
        run: docker images

      - name: Push The Release Docker Images to Quay.io
        run: ./.github/scripts/push-rc-images-to-quay.sh ${{ github.event.inputs.release-version}}

      - name: Maven Deploy
        run: |
          cd registry
          # Retry 3 times before the steps actually fails
          (echo "===== Maven Deploy Attempt: 1 ====" && mvn deploy --batch-mode -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -DskipTests -Prelease --settings /home/runner/.m2/settings.xml -DskipTests) || \
          (echo "===== Maven Deploy Attempt: 2 ====" && mvn deploy --batch-mode -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -DskipTests -Prelease --settings /home/runner/.m2/settings.xml -DskipTests) || \
          (echo "===== Maven Deploy Attempt: 3 ====" && mvn deploy --batch-mode -Pprod -Psql -Pinfinispan -Pstreams -Pasyncmem -DskipTests -Prelease --settings /home/runner/.m2/settings.xml -DskipTests) || \
          (echo "==== Maven Deploy Step Failed ====" && exit 1)

      - name: Update Snapshot Version ${{ github.event.inputs.snapshot-version}}
        run: |
          cd registry
          mvn versions:set -DnewVersion=${{ github.event.inputs.snapshot-version}} -DgenerateBackupPoms=false -DprocessAllModules=true
          sed -i  "s/version\:\s.*/version: \'master\'/g" docs/antora.yml
          cd ../registry-examples
          mvn versions:set -DnewVersion=${{ github.event.inputs.snapshot-version}} -DgenerateBackupPoms=false -DprocessAllModules=true

      - name: Commit Snapshot Version ${{ github.event.inputs.snapshot-version}}
        run: |
          cd registry
          git add .
          git commit -m "Automated update to next Snapshot Version: ${{ github.event.inputs.snapshot-version}}"
          git push
          cd ../registry-examples
          git add .
          git commit -m "Automated update to next Snapshot Version: ${{ github.event.inputs.snapshot-version}}"
          git push
