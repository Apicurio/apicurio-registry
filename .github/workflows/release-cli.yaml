name: Release CLI

on:
  release:
    types: [released]

  workflow_dispatch:
    inputs:
      release-linux-cli:
        required: true
        default: 'true'
      release-macos-cli:
        required: true
        default: 'true'
      release-win64-cli:
        required: true
        default: 'true'
  

jobs:
  build-linux-cli:
    if: github.repository_owner == 'Apicurio' && (github.event_name == 'release' || github.event.inputs.release-linux-cli == 'true')
    runs-on: ubuntu-latest
    steps:
    - name: Fetch required Details
      run: |
          touch latestRelease.json && curl https://api.github.com/repos/apicurio/apicurio-registry/releases/latest > latestRelease.json
          echo "RELEASE_VERSION=$(cat latestRelease.json | jq -r '.name')" >> $GITHUB_ENV
          echo "SOURCE_CODE_URL=$(cat latestRelease.json | jq -r '.zipball_url')" >> $GITHUB_ENV
          echo "UPLOAD_URL=$(cat latestRelease.json | jq -r '.upload_url')" >> $GITHUB_ENV
    
    - name: Log Environment Variables
      run: |
        echo "$RELEASE_VERSION"
        echo "$SOURCE_CODE_URL"
        echo "$UPLOAD_URL"

    - name: Download Source Code
      run: wget -c $SOURCE_CODE_URL && unzip $RELEASE_VERSION && ls -lrt && mv ${{github.repository_owner}}* registry
        
    - name: Verify Project Version
      run: |
        cd registry
        PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        if [[ $PROJECT_VERSION != $RELEASE_VERSION ]]
        then
            echo "ERROR: Project Version '${PROJECT_VERSION}' does not match with Released Version '${RELEASE_VERSION}'"
            exit 1	  
        fi
        
    - name: Install graalvm
      uses: DeLaGuardo/setup-graalvm@4.0
      with:
        # GraalVM version, no pattern syntax available atm
        graalvm: '21.0.0.2'
        # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
        java: 'java11'
        # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
        arch: 'amd64'

    - name: Install native-image
      run: gu install native-image

    - name: Get maven wrapper
      run: cd registry && mvn -N io.takari:maven:wrapper -Dmaven=3.6.3

    - name: Build jvm jar
      run: cd registry && ./mvnw -pl cli -am install
      
    - name: View Files
      run: ls -lrt registry/cli/target/

    - name: Upload jvm jar
      id: upload-jar
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./registry/cli/target/apicurio-registry-cli-${{ env.RELEASE_VERSION }}-runner.jar
        asset_name: apicurio-registry-cli-${{ env.RELEASE_VERSION }}.jar
        asset_content_type: application/octet-stream

    - name: Build native executable
      run: cd registry && ./mvnw -pl cli package -Dnative
    
    - name: View Files
      run: ls -lrt registry/cli/target/
      
    - name: Upload native executable
      id: upload-native-executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./registry/cli/target/apicurio-registry-cli-${{ env.RELEASE_VERSION }}-runner
        asset_name: apicurio-registry-cli-${{ env.RELEASE_VERSION }}-linux
        asset_content_type: application/octet-stream

    - name: Google Chat Notification
      if: ${{ failure() }}
      uses: Co-qn/google-chat-notification@releases/v1
      with:
        name: ${{ github.workflow }}
        url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
        status: ${{ job.status }}



  build-macos-cli:
    if: github.repository_owner == 'Apicurio' && (github.event_name == 'release' || github.event.inputs.release-macos-cli == 'true')
    runs-on: macos-latest
    steps:
    - name: Fetch required Details
      run: |
          touch latestRelease.json && curl https://api.github.com/repos/apicurio/apicurio-registry/releases/latest > latestRelease.json
          echo "RELEASE_VERSION=$(cat latestRelease.json | jq -r '.name')" >> $GITHUB_ENV
          echo "SOURCE_CODE_URL=$(cat latestRelease.json | jq -r '.zipball_url')" >> $GITHUB_ENV
          echo "UPLOAD_URL=$(cat latestRelease.json | jq -r '.upload_url')" >> $GITHUB_ENV
    
    - name: Echo Environment Variables
      run: |
        echo "$RELEASE_VERSION"
        echo "$SOURCE_CODE_URL"
        echo "$UPLOAD_URL"
        
    - name: Download Source Code
      run: wget -c $SOURCE_CODE_URL && unzip $RELEASE_VERSION && ls -lrt && mv ${{github.repository_owner}}* registry
        
    - name: Verify Project Version
      run: |
        cd registry
        PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        if [[ $PROJECT_VERSION != $RELEASE_VERSION ]]
        then
            echo "ERROR: Project Version '${PROJECT_VERSION}' does not match with Released Version '${RELEASE_VERSION}'"
            exit 1	  
        fi
        
    - name: Install graalvm
      uses: DeLaGuardo/setup-graalvm@4.0
      with:
        # GraalVM version, no pattern syntax available atm
        graalvm: '21.0.0.2'
        # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
        java: 'java11'
        # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
        arch: 'amd64'

    - name: Install native-image
      run: gu install native-image

    - name: Get maven wrapper
      run: cd registry && mvn -N io.takari:maven:wrapper -Dmaven=3.6.3

    - name: Build jvm jar
      run: cd registry && ./mvnw -pl cli -am install

    - name: Build native executable
      run: cd registry && ./mvnw -pl cli package -Dnative
      
    - name: List Files
      run: ls -lrt registry/cli/target/

    - name: Upload native executable
      id: upload-native-executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./registry/cli/target/apicurio-registry-cli-${{ env.RELEASE_VERSION }}-runner
        asset_name: apicurio-registry-cli-${{ env.RELEASE_VERSION }}-macos
        asset_label: macos
        asset_content_type: application/octet-stream

    - name: Google Chat Notification
      if: ${{ failure() }}
      uses: Co-qn/google-chat-notification@releases/v1
      with:
        name: ${{ github.workflow }}
        url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
        status: ${{ job.status }}



  build-win64-cli:
    if: github.repository_owner == 'Apicurio' && (github.event_name == 'release' || github.event.inputs.release-win64-cli == 'true')
    runs-on: windows-2019
    steps:
    - name: Fetch required Details
      shell: bash
      run: |
          touch latestRelease.json && curl https://api.github.com/repos/apicurio/apicurio-registry/releases/latest > latestRelease.json
          echo "RELEASE_VERSION=$(cat latestRelease.json | jq -r '.name')" >> $GITHUB_ENV
          echo "SOURCE_CODE_URL=$(cat latestRelease.json | jq -r '.zipball_url')" >> $GITHUB_ENV
          echo "UPLOAD_URL=$(cat latestRelease.json | jq -r '.upload_url')" >> $GITHUB_ENV
          
    - name: Echo Environment Variables
      shell: bash
      run: |
        echo "$RELEASE_VERSION"
        echo "$SOURCE_CODE_URL"
        echo "$UPLOAD_URL"

    - name: Download Source Code Zip
      run: Invoke-WebRequest $Env:SOURCE_CODE_URL -OutFile $Env:RELEASE_VERSION
      
    - name: Unzip Source code
      shell: bash
      run: pwd && ls -lrt && jar xf $RELEASE_VERSION && ls -lrt && mv ${{github.repository_owner}}* registry
        
    - name: Verify Project Version
      shell: bash
      run: |
        cd registry
        PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        if [[ $PROJECT_VERSION != $RELEASE_VERSION ]]
        then
            echo "ERROR: Project Version '${PROJECT_VERSION}' does not match with Released Version '${RELEASE_VERSION}'"
            exit 1	  
        fi

    - name: Install graalvm
      uses: DeLaGuardo/setup-graalvm@4.0
      with:
        # GraalVM version, no pattern syntax available atm
        graalvm: '21.0.0.2'
        # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
        java: 'java11'
        # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
        arch: 'amd64'

    - name: Install native-image
      run: |
        %JAVA_HOME%/bin/gu.cmd install native-image
      shell: cmd

    - name: Configure Pagefile
      # Increased the page-file size due to memory-consumption of native-image command
      # For details see https://github.com/actions/virtual-environments/issues/785
      uses: al-cheb/configure-pagefile-action@v1.2

    - name: Get maven wrapper
      shell: bash
      run: cd registry && mvn -N io.takari:maven:wrapper -Dmaven=3.6.3

    - name: Build jvm jar
      shell: cmd
      run: cd registry && mvnw.cmd -pl cli -am install

    - name: Build native executable
      # Invoke the native-image build with the necessary Visual Studio tooling/environment intialized
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
        cd registry && mvnw.cmd -pl cli package -Dnative
      shell: cmd
      
    - name: List Files
      shell: bash
      run: ls -lrt registry/cli/target/

    - name: Upload native executable
      id: upload-native-executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./registry/cli/target/apicurio-registry-cli-${{ env.RELEASE_VERSION }}-runner.exe
        asset_name: apicurio-registry-cli-${{ env.RELEASE_VERSION }}-win64.exe
        asset_label: win64
        asset_content_type: application/octet-stream

    - name: Google Chat Notification
      if: ${{ failure() }}
      uses: Co-qn/google-chat-notification@releases/v1
      with:
        name: ${{ github.workflow }}
        url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
        status: ${{ job.status }}