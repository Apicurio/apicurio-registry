name: Release Images
on:
  workflow_dispatch: {}
  release:
    types: [released, prereleased]


# github.event context is only available when the workflow gets triggered by a release event. Therefore, commenting the below
# section and add an additional step of fething the required details explicitly to make the workflow work with manual triggers

#env:
#  # Setting up workflow level environment varibles to make them available in both jobs
#  # The values are extracted from the github.event context, which is automatically availble when a release a created.
#  RELEASE_VERSION: ${{ github.event.release.name }}
#  SOURCE_CODE_URL: ${{ github.event.release.zipball_url }}
#  BRANCH: ${{ github.event.release.target_commitish }}


jobs:
  release-images:
    if: github.repository_owner == 'Apicurio'
    runs-on: ubuntu-18.04
    env:
      RELEASE_TYPE: release
    steps:
        # Open-Source Machine emulator that allows you to emulate multiple CPU architectures on your machine
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
        # Docker CLI plugin for extended build capabilities with BuildKit
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Fetch required Details
        run: |
          touch latestRelease.json && curl https://api.github.com/repos/${GITHUB_REPOSITORY}/releases | jq '.[0]' > latestRelease.json
          echo "RELEASE_VERSION=$(cat latestRelease.json | jq -r '.name')" >> $GITHUB_ENV
          echo "SOURCE_CODE_URL=$(cat latestRelease.json | jq -r '.zipball_url')" >> $GITHUB_ENV
          echo "BRANCH=$(cat latestRelease.json | jq -r '.target_commitish')" >> $GITHUB_ENV

      - name: Determine Release Type
        if: "contains(env.RELEASE_VERSION, 'RC')"
        run: |
          echo "This is a pre-release. Setting 'RELEASE_TYPE' to 'pre-release'"
          echo "RELEASE_TYPE=pre-release" >> $GITHUB_ENV

      - name: Download Source Code
        run: wget -c $SOURCE_CODE_URL && unzip $RELEASE_VERSION && ls -lrt && mv ${{github.repository_owner}}* registry
        
      # We have faced issues in the past where a github release was created from a wrong commit
      # This step will ensure that the release was created from the right commit  
      - name: Verify Project Version
        run: |
          cd registry
          PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          if [[ $PROJECT_VERSION != $RELEASE_VERSION ]]
          then
              echo "ERROR: Project Version '${PROJECT_VERSION}' does not match with Released Version '${RELEASE_VERSION}'"
              exit 1	  
          fi

      - name: Set up JDK 11
        uses: AdoptOpenJDK/install-jdk@v1
        with:
          version: '11'
          architecture: x64

      - name: Build Project
        run: cd registry && make SKIP_TESTS=true BUILD_FLAGS='-Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5' build-all
      
      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
       
      - name: Build and Push Multi-arch Images to Docker.io
        run: cd registry && ./.github/scripts/build-and-push-multiarch-images.sh ${BRANCH} docker.io ${RELEASE_TYPE} ${RELEASE_VERSION}

      - name: Login to Quay.io Registry
        run: docker login -u "${{ secrets.QUAY_USERNAME }}" -p "${{ secrets.QUAY_PASSWORD }}" quay.io

      - name: Build and Push Multi-arch Images to Quay.io
        run: cd registry && ./.github/scripts/build-and-push-multiarch-images.sh ${BRANCH} quay.io ${RELEASE_TYPE} ${RELEASE_VERSION}

      - name: Google Chat Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.job }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: ${{ job.status }}