name: Release Workflow
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: Version being released
        required: true
      branch:
        description: Branch to release from
        required: true
        default: main
jobs:
  release:
    runs-on: ubuntu-22.04
    env:
      IS_PRE_RELEASE: false
      MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    if: github.repository_owner == 'Apicurio'
    steps:
      - name: Calculate Next Version
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release-version }}"

          # Extract major, minor, and patch from release version (handles versions like 3.0.1 or 3.0.1-RC1)
          MAJOR=$(echo "$RELEASE_VERSION" | awk -F '[.-]' '{print $1}')
          MINOR=$(echo "$RELEASE_VERSION" | awk -F '[.-]' '{print $2}')
          PATCH=$(echo "$RELEASE_VERSION" | awk -F '[.-]' '{print $3}')

          # Increment patch version
          NEXT_PATCH=$((PATCH + 1))

          # Create next version
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}"

          # Create snapshot version
          SNAPSHOT_VERSION="${NEXT_VERSION}-SNAPSHOT"

          # Calculate derived versions for release
          RELEASE_DOCS_VERSION="${MAJOR}.${MINOR}.x"
          RELEASE_UI_VERSION="${MAJOR}.${MINOR}.${PATCH}"

          # Calculate derived versions for snapshot (next development cycle)
          SNAPSHOT_DOCS_VERSION="${MAJOR}.${MINOR}.x"
          SNAPSHOT_UI_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-Dev"

          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
          echo "SNAPSHOT_VERSION=${SNAPSHOT_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_DOCS_VERSION=${RELEASE_DOCS_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_UI_VERSION=${RELEASE_UI_VERSION}" >> $GITHUB_ENV
          echo "SNAPSHOT_DOCS_VERSION=${SNAPSHOT_DOCS_VERSION}" >> $GITHUB_ENV
          echo "SNAPSHOT_UI_VERSION=${SNAPSHOT_UI_VERSION}" >> $GITHUB_ENV

      - name: Log Metadata
        run: |
          echo "Releasing Apicurio Registry version ${{ github.event.inputs.release-version }} from branch ${{ github.event.inputs.branch }}"
          echo "Next version will be ${{ env.NEXT_VERSION }}"
          echo "Next Snapshot version will be ${{ env.SNAPSHOT_VERSION }}"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up json CLI
        run: npm install -g json

      - name: Set up Gren
        run: npm install -g github-release-notes

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@f6f458f535f4ccdf100400ee0755c0e857226a66
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Apicurio Registry Checkout
        run: |
          mkdir registry
          cd registry
          git init
          git config --global user.name "apicurio-ci"
          git config --global user.email "apicurio.ci@gmail.com"
          git remote add origin "https://apicurio-ci:${{ secrets.ACCESS_TOKEN }}@github.com/Apicurio/apicurio-registry.git"
          git fetch
          git checkout ${{ github.event.inputs.branch }}
          git branch --set-upstream-to=origin/${{ github.event.inputs.branch }}
          git pull

      - name: Update Release Version ${{ github.event.inputs.release-version}}
        run: |
          cd registry
          mvn versions:set -DnewVersion=${{ github.event.inputs.release-version}} -DgenerateBackupPoms=false -DprocessAllModules=true

          sed -i  "s/version\:\s.*/version: \'${{ env.RELEASE_DOCS_VERSION }}\'/g" docs/antora.yml
          sed -i  "5s/\"version\"\:\s\".*\"/\"version\": \"${{ env.RELEASE_DOCS_VERSION }}\"/g" app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v3/openapi.json

          # TODO: Operator docs

          sed -i "s/^version.*/version \= \"${{ env.RELEASE_UI_VERSION }}\"/" python-sdk/pyproject.toml

          cd ui
          npm version ${{ env.RELEASE_UI_VERSION }} --allow-same-version
          cd ui-app
          npm version ${{ env.RELEASE_UI_VERSION }} --allow-same-version
          json -I -f package.json -e "this.dependencies[\"@apicurio/apicurio-registry-sdk\"]=\"${{ env.RELEASE_UI_VERSION }}\""
          cd ../ui-docs
          npm version ${{ env.RELEASE_UI_VERSION }} --allow-same-version
          cd ../tests
          npm version ${{ env.RELEASE_UI_VERSION }} --allow-same-version
          cd ../../typescript-sdk
          npm version ${{ env.RELEASE_UI_VERSION }} --allow-same-version

      - name: Build Registry (All Variants)
        run: |
          cd registry
          ./mvnw clean package --no-transfer-progress -Pprod -DskipTests=true -DskipCommitIdPlugin=false -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5

      - name: Build Registry UI
        working-directory: registry/ui
        run: |
          npm install
          npm run lint
          npm run build
          npm run package

      - name: (Operator) Configure env. variables
        run: |
          echo "OPERAND_IMAGE_TAG=${{ github.event.inputs.release-version }}" >> $GITHUB_ENV

      - name: (Operator) Update install file
        working-directory: registry/operator
        run: |
          make dist-install-file
          cp "$(make VAR=INSTALL_FILE variable-get)" install/install.yaml
          git add install/*

      - name: (Operator) Commit pre-release changes
        working-directory: registry/operator
        run: |
          git commit -m "ci(operator): pre-release changes for ${{ github.event.inputs.release-version }}"

      - name: Commit Release Version Change
        run: |
          cd registry
          git add .
          git commit -m "Automated update to Release Version:: ${{ github.event.inputs.release-version}}"
          git push

      - name: Determine Release Type
        if: "contains(github.event.inputs.release-version, 'RC')"
        run: |
          echo "This is a pre-release. Setting environment variable 'IS_PRE_RELEASE' to true"
          echo "IS_PRE_RELEASE=true" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          name: ${{ github.event.inputs.release-version }}
          tag_name: ${{ github.event.inputs.release-version }}
          token: ${{ secrets.ACCESS_TOKEN }}
          target_commitish: ${{ github.event.inputs.branch }}
          prerelease: ${{ env.IS_PRE_RELEASE }}
          files: |
            registry/distro/docker/target/docker/app-files/apicurio-registry-app-${{ github.event.inputs.release-version }}-all.*

      - name: Generate Release Notes
        run: |
          cd registry
          gren release --token=${{ secrets.GITHUB_TOKEN }} --override

      - name: Update Snapshot Version ${{ env.SNAPSHOT_VERSION }}
        run: |
          cd registry
          mvn versions:set -DnewVersion=${{ env.SNAPSHOT_VERSION }} -DgenerateBackupPoms=false -DprocessAllModules=true

          sed -i  "s/version\:\s.*/version: \'${{ env.SNAPSHOT_DOCS_VERSION }}\'/g" docs/antora.yml
          sed -i  "5s/\"version\"\:\s\".*\"/\"version\": \"${{ env.SNAPSHOT_DOCS_VERSION }}\"/g" app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v3/openapi.json

          # TODO: Operator docs

          sed -i "s/^version.*/version \= \"${{ env.NEXT_VERSION }}\"/" python-sdk/pyproject.toml

          cd ui
          npm version ${{ env.SNAPSHOT_UI_VERSION }} --allow-same-version
          cd ui-app
          npm version ${{ env.SNAPSHOT_UI_VERSION }} --allow-same-version
          json -I -f package.json -e "this.dependencies[\"@apicurio/apicurio-registry-sdk\"]=\"${{ env.SNAPSHOT_UI_VERSION }}\""
          cd ../ui-docs
          npm version ${{ env.SNAPSHOT_UI_VERSION }} --allow-same-version
          cd ../tests
          npm version ${{ env.SNAPSHOT_UI_VERSION }} --allow-same-version
          cd ../../typescript-sdk
          npm version ${{ env.SNAPSHOT_UI_VERSION }} --allow-same-version

      - name: Commit Snapshot Version ${{ env.SNAPSHOT_VERSION }}
        run: |
          cd registry
          git add .
          git commit -m "Automated update to next Snapshot Version: ${{ env.SNAPSHOT_VERSION }}"
          git push

      - name: Slack Notification (Always)
        if: always()
        run: |
          MESSAGE="'${{ github.workflow }}/${{ github.job }}' job completed with status: ${{ job.status }}"
          REPO="${{ github.repository }}"
          LINK="https://github.com/$REPO/actions/runs/${{ github.run_id }}"
          PAYLOAD="{\"workflow\": \"${{ github.workflow }}\", \"status\": \"${{ job.status }}\", \"message\": \"$MESSAGE\", \"link\": \"$LINK\", \"repository\": \"$REPO\"}"
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" ${{ secrets.SLACK_NOTIFICATION_WEBHOOK }}

      - name: Slack Notification (Error)
        if: failure()
        run: |
          MESSAGE="'${{ github.workflow }}/${{ github.job }}' job FAILED!"
          REPO="${{ github.repository }}"
          LINK="https://github.com/$REPO/actions/runs/${{ github.run_id }}"
          PAYLOAD="{\"workflow\": \"${{ github.workflow }}\", \"status\": \"${{ job.status }}\", \"message\": \"$MESSAGE\", \"link\": \"$LINK\", \"repository\": \"$REPO\"}"
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" ${{ secrets.SLACK_ERROR_WEBHOOK }}

      - name: Setup tmate session on failure
        if: failure()
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
