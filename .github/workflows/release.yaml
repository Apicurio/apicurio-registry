name: Release Workflow
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: Version being released
        required: true
      apicurio-studio-version:
        description: Apicurio Studio version being used in this release. Must correspond to an image tag.
        required: true
      snapshot-version:
        description: Next snapshot version
        required: true
      branch:
        description: Branch to release from
        required: true
        default: main
jobs:
  release:
    runs-on: ubuntu-22.04
    if: github.repository_owner == 'Apicurio'
    env:
      IS_PRE_RELEASE: false
    steps:
      - name: Log Metadata
        run: |
          echo "Releasing Apicurio Registry version ${{ github.event.inputs.release-version }} from branch ${{ github.event.inputs.branch }}"
          echo "Next Snapshot version will be ${{ github.event.inputs.snapshot-version }}"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: Set up json CLI
        run: npm install -g json

      - name: Set up Gren
        run: npm install -g github-release-notes

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@f6f458f535f4ccdf100400ee0755c0e857226a66
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Apicurio Registry Checkout
        run: |
          mkdir registry
          cd registry
          git init
          git config --global user.name "apicurio-ci"
          git config --global user.email "apicurio.ci@gmail.com"
          git remote add origin "https://apicurio-ci:${{ secrets.ACCESS_TOKEN }}@github.com/Apicurio/apicurio-registry.git"
          git fetch
          git checkout ${{ github.event.inputs.branch }}
          git branch --set-upstream-to=origin/${{ github.event.inputs.branch }}
          git pull

      - name: Update Release Version ${{ github.event.inputs.release-version}}
        run: |
          cd registry
          mvn versions:set -DnewVersion=${{ github.event.inputs.release-version}} -DgenerateBackupPoms=false -DprocessAllModules=true

          # take only the major and minor versions from release-version and then append .x.
          DOCS_VERSION=$(echo "${{ github.event.inputs.release-version}}" | awk -F '[.-]' '{print $1"."$2".x"}')
          
          sed -i  "s/version\:\s.*/version: \'${DOCS_VERSION}\'/g" docs/antora.yml
          sed -i  "5s/\"version\"\:\s\".*\"/\"version\": \"${DOCS_VERSION}\"/g" app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v3/openapi.json

          # TODO: Operator docs

          # take only the major, minor and patch
          PYTHON_SDK_VERSION=$(echo "${{ github.event.inputs.release-version}}" | awk -F '[.-]' '{print $1"."$2"."$3}')
          sed -i "s/^version.*/version \= \"${PYTHON_SDK_VERSION}\"/" python-sdk/pyproject.toml

          # take only the major, minor and patch
          UI_VERSION=$(echo "${{ github.event.inputs.release-version}}" | awk -F '[.-]' '{print $1"."$2"."$3}')
          cd ui
          npm version $UI_VERSION --allow-same-version
          cd ui-app
          npm version $UI_VERSION --allow-same-version
          json -I -f package.json -e "this.dependencies[\"@apicurio/apicurio-registry-sdk\"]=\"$UI_VERSION\""
          cd ../ui-docs
          npm version $UI_VERSION --allow-same-version
          cd ../tests
          npm version $UI_VERSION --allow-same-version
          cd ../../typescript-sdk
          npm version $UI_VERSION --allow-same-version

      - name: Build Registry (All Variants)
        run: |
          cd registry
          ./mvnw clean package --no-transfer-progress -Pprod -DskipTests=true -DskipCommitIdPlugin=false -Dmaven.wagon.httpconnectionManager.maxTotal=30 -Dmaven.wagon.http.retryHandler.count=5

      - name: Build Registry UI
        working-directory: registry/ui
        run: |
          npm install
          npm run lint
          npm run build
          npm run package

      - name: (Operator) Configure env. variables
        run: |
          echo "OPERAND_IMAGE_TAG=${{ github.event.inputs.release-version }}" >> $GITHUB_ENV

      - name: (Operator) Update Makefile
        working-directory: registry/operator
        run: |
          make VAR=STUDIO_UI_IMAGE_TAG "VAL=${{ github.event.inputs.apicurio-studio-version }}" set-variable
          git add Makefile

      - name: (Operator) Update install file
        working-directory: registry/operator
        run: |
          make dist-install-file
          cp "$(make VAR=INSTALL_FILE get-variable)" install/install.yaml
          git add install/*

      - name: (Operator) Commit pre-release changes
        working-directory: registry/operator
        run: |
          git commit -m "ci(operator): pre-release changes for ${{ github.event.inputs.release-version }}"

      - name: Commit Release Version Change
        run: |
          cd registry
          git add .
          git commit -m "Automated update to Release Version:: ${{ github.event.inputs.release-version}}"
          git push

      - name: Determine Release Type
        if: "contains(github.event.inputs.release-version, 'RC')"
        run: |
          echo "This is a pre-release. Setting environment variable 'IS_PRE_RELEASE' to true"
          echo "IS_PRE_RELEASE=true" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          name: ${{ github.event.inputs.release-version }}
          tag_name: ${{ github.event.inputs.release-version }}
          token: ${{ secrets.ACCESS_TOKEN }}
          target_commitish: ${{ github.event.inputs.branch }}
          prerelease: ${{ env.IS_PRE_RELEASE }}
          files: |
            registry/distro/docker/target/docker/app-files/apicurio-registry-app-${{ github.event.inputs.release-version }}-all.tar.gz

      - name: Generate Release Notes
        run: |
          cd registry
          gren release --token=${{ secrets.GITHUB_TOKEN }} --override

      - name: Update Snapshot Version ${{ github.event.inputs.snapshot-version}}
        run: |
          cd registry
          mvn versions:set -DnewVersion=${{ github.event.inputs.snapshot-version}} -DgenerateBackupPoms=false -DprocessAllModules=true

          # take only the major and minor versions from snapshot-version and then append .x.
          DOCS_VERSION=$(echo "${{ github.event.inputs.snapshot-version}}" | awk -F '[.-]' '{print $1"."$2".x"}')

          sed -i  "s/version\:\s.*/version: \'${DOCS_VERSION}\'/g" docs/antora.yml
          sed -i  "5s/\"version\"\:\s\".*\"/\"version\": \"${DOCS_VERSION}\"/g" app/src/main/resources-unfiltered/META-INF/resources/api-specifications/registry/v3/openapi.json

          # TODO: Operator docs

          # take only the major, minor and patch
          PYTHON_SDK_VERSION=$(echo "${{ github.event.inputs.snapshot-version}}" | awk -F '[.-]' '{print $1"."$2"."$3}')
          sed -i "s/^version.*/version \= \"${PYTHON_SDK_VERSION}\"/" python-sdk/pyproject.toml

          # take only the major, minor and patch
          UI_VERSION=$(echo "${{ github.event.inputs.snapshot-version}}" | awk -F '[.-]' '{print $1"."$2"."$3}-Dev')
          cd ui
          npm version $UI_VERSION --allow-same-version
          cd ui-app
          npm version $UI_VERSION --allow-same-version
          json -I -f package.json -e "this.dependencies[\"@apicurio/apicurio-registry-sdk\"]=\"$UI_VERSION\""
          cd ../ui-docs
          npm version $UI_VERSION --allow-same-version
          cd ../tests
          npm version $UI_VERSION --allow-same-version
          cd ../../typescript-sdk
          npm version $UI_VERSION --allow-same-version

      - name: Commit Snapshot Version ${{ github.event.inputs.snapshot-version}}
        run: |
          cd registry
          git add .
          git commit -m "Automated update to next Snapshot Version: ${{ github.event.inputs.snapshot-version}}"
          git push

      - name: Slack Notification (Always)
        if: always()
        run: |
          MESSAGE="'${{ github.workflow }}/${{ github.job }}' job completed with status: ${{ job.status }}"
          REPO="${{ github.repository }}"
          LINK="https://github.com/$REPO/actions/runs/${{ github.run_id }}"
          PAYLOAD="{\"workflow\": \"${{ github.workflow }}\", \"status\": \"${{ job.status }}\", \"message\": \"$MESSAGE\", \"link\": \"$LINK\", \"repository\": \"$REPO\"}"
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" ${{ secrets.SLACK_NOTIFICATION_WEBHOOK }}

      - name: Slack Notification (Error)
        if: failure()
        run: |
          MESSAGE="'${{ github.workflow }}/${{ github.job }}' job FAILED!"
          REPO="${{ github.repository }}"
          LINK="https://github.com/$REPO/actions/runs/${{ github.run_id }}"
          PAYLOAD="{\"workflow\": \"${{ github.workflow }}\", \"status\": \"${{ job.status }}\", \"message\": \"$MESSAGE\", \"link\": \"$LINK\", \"repository\": \"$REPO\"}"
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" ${{ secrets.SLACK_ERROR_WEBHOOK }}

      - name: Setup tmate session on failure
        if: failure()
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
