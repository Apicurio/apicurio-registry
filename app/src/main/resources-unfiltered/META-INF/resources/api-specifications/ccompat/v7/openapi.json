{
  "openapi": "3.0.2",
  "info": {
    "title": "Apicurio Registry Confluent Compatibility API",
    "version": "7.9.0",
    "description": "Apicurio Registry Confluent compatibility API",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "paths": {
    "/schemas/ids/{id}": {
      "summary": "Get the schema string identified by the input ID.",
      "get": {
        "tags": [
          "Schemas"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The globally unique identifier of the schema.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Desired output format. For AVRO: \"\" (default) or \"resolved\". For PROTOBUF: \"\", \"ignore_extensions\", or \"serialized\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "required": false,
            "description": "Look for the subject in all contexts starting with the default context and return the schema with the ID from that context.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema string identified by the ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schema": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "schema"
                  ],
                  "example": {
                    "schema": "{\"type\": \"string\"}"
                  }
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schema": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "schema"
                  ]
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schema": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "schema"
                  ]
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/schemas/ids/{id}/schema": {
      "summary": "Retrieves only the schema identified by the input ID.",
      "get": {
        "tags": [
          "Schemas"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The globally unique identifier of the schema.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Desired output format. For AVRO: \"\" (default) or \"resolved\". For PROTOBUF: \"\", \"ignore_extensions\", or \"serialized\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "required": false,
            "description": "Look for the subject in all contexts starting with the default context and return the schema with the ID from that context.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema string identified by the ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "\"string\""
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/schemas/types": {
      "summary": "Get the schema types that are registered with Schema Registry.",
      "get": {
        "tags": [
          "Schemas"
        ],
        "responses": {
          "200": {
            "description": "Schema types currently available on Schema Registry.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "JSON",
                  "PROTOBUF",
                  "AVRO"
                ]
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/schemas/ids/{id}/versions": {
      "summary": "Get the subject-version pairs identified by the input ID.",
      "get": {
        "tags": [
          "Schemas"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The globally unique identifier of the schema.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of subject-version pairs where the schema is registered.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectVersion"
                  }
                },
                "example": [
                  {
                    "subject": "test-subject1",
                    "version": 1
                  }
                ]
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectVersion"
                  }
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectVersion"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/subjects": {
      "summary": "Get a list of registered subjects.",
      "get": {
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subjectPrefix",
            "in": "query",
            "required": false,
            "description": "List subjects in the default context. If not included, returns all subjects across all contexts.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "description": "Include both current and soft-deleted subjects. Default is false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of registered subject names.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "subject1",
                  "subject2"
                ]
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/subjects/{subject}/versions": {
      "summary": "Get a list of versions registered under the specified subject.",
      "get": {
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "The name of the subject.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of version numbers registered under the subject.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "example": [
                  1,
                  2,
                  3,
                  4
                ]
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "description": "Registers a schema under the subject and returns the globally unique identifier. If the schema already exists, it returns the existing schema's ID and version.",
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Subject under which the schema will be registered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "normalize",
            "in": "query",
            "required": false,
            "description": "If true, normalize the schema before comparing. Default is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Desired output format. For AVRO: \"\" or \"resolved\". For PROTOBUF: \"\", \"ignore_extensions\", or \"serialized\".",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Schema information to register under the subject.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterSchemaRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "schema": "{ \"type\": \"record\", \"name\": \"test\", \"fields\": [{ \"type\": \"string\", \"name\": \"field1\" }, { \"type\": \"com.acme.Referenced\", \"name\": \"int\" }] }",
                    "schemaType": "AVRO",
                    "references": [
                      {
                        "name": "com.acme.Referenced",
                        "subject": "childSubject",
                        "version": 1
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schema successfully registered (or already exists).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Globally unique identifier of the schema"
                    }
                  },
                  "example": {
                    "id": 1
                  }
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/Error"
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/subjects/{subject}": {
      "summary": "The subjects resource provides a list of all registered subjects across all contexts in your Schema Registry. A subject refers to the name under which the schema is registered. If you are using Schema Registry for Kafka, then a subject refers to either a “<topic>-value” or “<topic>-key” depending on whether you are registering the value schema for that topic or the key schema.",
      "post": {
        "description": "Returns the schema string along with its global ID and version if already registered under the given subject.",
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "The subject under which the schema will be registered.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "normalize",
            "in": "query",
            "required": false,
            "description": "Normalize the schema content before comparing. Default is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Desired output format. For AVRO: \"\" or \"resolved\". For PROTOBUF: \"\", \"ignore_extensions\", or \"serialized\".",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Schema information to check for registration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterSchemaRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "schema": "{ \"type\": \"record\", \"name\": \"test\", \"fields\": [ { \"type\": \"string\", \"name\": \"field1\" }, { \"type\": \"int\", \"name\": \"field2\" } ] }"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schema found under the subject.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "example": {
                  "subject": "test",
                  "id": 1,
                  "version": 3,
                  "schema": "{ \"type\": \"record\", \"name\": \"test\", \"fields\": [ { \"type\": \"string\", \"name\": \"field1\" }, { \"type\": \"int\", \"name\": \"field2\" } ] }"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "The name of the subject to delete.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "description": "If true, perform a hard delete. Default is false (soft delete).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of version numbers that were deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "example": [
                  1,
                  2,
                  3,
                  4
                ]
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/subjects/{subject}/versions/{version}": {
      "summary": "Subject version operations.",
      "get": {
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "Version of the schema to return. Can be a version number, 'latest', or '-1'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Desired output format. For AVRO: \"\" (default) or \"resolved\". For PROTOBUF: \"\", \"ignore_extensions\", or \"serialized\".",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema version data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "avro": {
                    "value": {
                      "subject": "test",
                      "version": 1,
                      "schema": "{\"type\": \"string\"}"
                    }
                  },
                  "protobuf": {
                    "value": {
                      "subject": "test",
                      "version": 1,
                      "schemaType": "PROTOBUF",
                      "schema": "{\"type\": \"string\"}"
                    }
                  }
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "description": "Performs a soft or hard delete on the specified schema version. Hard delete requires the exact version number (not 'latest').",
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "Version of the schema to delete. Can be a version number, 'latest', or '-1'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permanent",
            "in": "query",
            "required": false,
            "description": "If true, perform a hard delete. Default is false (soft delete).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The version number that was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                },
                "example": 1
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "integer"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/subjects/{subject}/versions/{version}/schema": {
      "summary": "Get the schema for the specified version of a subject.",
      "description": "Returns the raw (unescaped) schema string for a given subject and version.",
      "get": {
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "Version of the schema to be returned. Can be a version number, 'latest', or '-1'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Desired output format. For AVRO: \"\" or \"resolved\". For PROTOBUF: \"\", \"ignore_extensions\", or \"serialized\".",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The raw, unescaped schema string.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "{\"type\": \"string\"}"
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/subjects/{subject}/versions/{version}/referencedby": {
      "summary": "Get a list of IDs of schemas that reference the specified schema version.",
      "description": "Returns the list of globally unique schema IDs that reference the given subject and version.",
      "get": {
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "The name of the subject.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "Version of the schema. Can be a version number, 'latest', or '-1'.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of schema IDs that reference the specified schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "example": [
                  1,
                  2,
                  3,
                  4
                ]
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/subjects/{subject}/metadata": {
      "summary": "Retrieve the latest version with the given metadata filters.",
      "description": "Returns the latest schema version registered under the specified subject that matches the provided metadata key-value pairs.",
      "get": {
        "tags": [
          "Subjects"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject to search under.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "description": "Metadata key to match. Can appear multiple times, matched in order with 'value'.",
            "schema": {
              "type": "string"
            },
            "explode": true
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "description": "Metadata value to match. Can appear multiple times, matched in order with 'key'.",
            "schema": {
              "type": "string"
            },
            "explode": true
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Desired output format. For AVRO: \"\" or \"resolved\". For PROTOBUF: \"\", \"ignore_extensions\", or \"serialized\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "required": false,
            "description": "If true, include both current and soft-deleted subjects. Default is false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema version matching the metadata filters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/mode": {
      "summary": "Get the current global mode of Schema Registry.",
      "description": "Returns the global mode for Schema Registry, which can be one of: IMPORT, READONLY, or READWRITE (default).",
      "get": {
        "tags": [
          "Mode"
        ],
        "responses": {
          "200": {
            "description": "Returns the current global mode.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                },
                "example": {
                  "mode": "READWRITE"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "description": "Updates the global mode for Schema Registry. This operation is allowed only if Schema Registry was started with mode.mutability=true.",
        "tags": [
          "Mode"
        ],
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "If true, allows the mode change even if schemas are already registered. Useful in disaster recovery scenarios.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModeUpdateRequest"
              },
              "example": {
                "mode": "IMPORT"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated global mode.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                },
                "example": {
                  "mode": "IMPORT"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/mode/{subject}": {
      "summary": "Subject-level mode operations.",
      "description": "",
      "get": {
        "description": "Returns the mode configured for a specific subject. If not explicitly configured, the subject inherits the global mode.",
        "tags": [
          "Mode"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the mode for the subject.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                },
                "example": {
                  "mode": "READWRITE"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "put": {
        "description": "Updates the subject-level mode. This is allowed only if Schema Registry was started with mode.mutability=true.",
        "tags": [
          "Mode"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "If true, forces the mode change even if schemas already exist. Useful in disaster recovery scenarios.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModeUpdateRequest"
              },
              "example": {
                "mode": "READONLY"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated subject mode.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                },
                "example": {
                  "mode": "READONLY"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeUpdateResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/compatibility/subjects/{subject}/versions/{version}": {
      "summary": "Test schema compatibility against a specific version of a subject.",
      "description": "Checks whether the provided schema is compatible with a specific version of the subject's schema, based on configured compatibility rules.",
      "post": {
        "tags": [
          "Compatibility"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Subject of the schema version to check compatibility against.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "description": "Version of the subject’s schema to check against. Can be a number, 'latest', or '-1'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "description": "If true, includes reason when compatibility fails. Default is false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterSchemaRequest"
              },
              "example": {
                "schema": "{ \"type\": \"record\", \"name\": \"test\", \"fields\": [ { \"type\": \"string\", \"name\": \"field1\" }, { \"type\": \"int\", \"name\": \"field2\" } ] }"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compatibility check result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompatibilityCheckResponse"
                },
                "example": {
                  "is_compatible": true
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/CompatibilityCheckResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/CompatibilityCheckResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/compatibility/subjects/{subject}/versions": {
      "summary": "Test schema compatibility against all applicable versions of a subject.",
      "description": "Tests a schema for compatibility against all versions under the subject, depending on the configured compatibility level (e.g. TRANSITIVE levels test all previous versions).",
      "post": {
        "tags": [
          "Compatibility"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Subject of the schema version to check compatibility against.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "required": false,
            "description": "If true, includes reason when compatibility fails. Default is false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterSchemaRequest"
              },
              "example": {
                "schema": "{ \"type\": \"record\", \"name\": \"test\", \"fields\": [ { \"type\": \"string\", \"name\": \"field1\" }, { \"type\": \"int\", \"name\": \"field2\" } ] }"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compatibility check result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompatibilityCheckResponse"
                },
                "example": {
                  "is_compatible": true
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/CompatibilityCheckResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/CompatibilityCheckResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/config": {
      "summary": "Global configuration operations.",
       "put": {
         "summary": "Update the global configuration for compatibility and related settings.",
         "description": "Updates global configuration values such as compatibility level, normalization, metadata, rule sets, and compatibility group. This applies to the entire Schema Registry cluster.",
         "tags": [
          "Config"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalConfigUpdateRequest"
              },
              "example": {
                "compatibility": "FULL"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated global configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                },
                "example": {
                  "compatibility": "FULL"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/config/{subject}": {
      "summary": "Update the compatibility level and related configuration for a subject.",
      "description": "Updates compatibility settings for a specific subject. These settings override the global configuration for this subject.",
      "put": {
        "description": "Update the compatibility level for a subject. This setting overrides the global compatibility level for this subject.",
        "summary": "Update the compatibility level for a subject.",
        "tags": [
          "Config"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalConfigUpdateRequest"
              },
              "example": {
                "compatibility": "FULL"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated configuration for the subject.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                },
                "example": {
                  "compatibility": "FULL"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "get": {
        "description": "Get the compatibility level for a subject.",
        "summary": "Get the compatibility level for a subject.",
        "tags": [
          "Config"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultToGlobal",
            "in": "query",
            "required": false,
            "description": "If true, shows the effective configuration used for compatibility checks, falling back to global config if subject config is not set.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The current compatibility configuration for the subject.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectConfigResponse"
                },
                "example": {
                  "compatibilityLevel": "FULL"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectConfigResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/SubjectConfigResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete subject-level compatibility configuration.",
        "description": "Removes the compatibility configuration for a subject and reverts it to the global default configuration.",
        "tags": [
          "Config"
        ],
        "parameters": [
          {
            "name": "subject",
            "in": "path",
            "required": true,
            "description": "Name of the subject whose compatibility configuration should be deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The previous subject-level configuration before deletion (or the new global default in effect).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                },
                "example": {
                  "compatibility": "NONE"
                }
              },
              "application/vnd.schemaregistry.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                }
              },
              "application/vnd.schemaregistry+json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalConfigResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Error"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "required": [
          "error_code",
          "message"
        ],
        "properties": {
          "error_code": {
            "type": "integer",
            "format": "int32",
            "description": "The internal error code."
          },
          "message": {
            "type": "string",
            "description": "Human-readable description of the error."
          }
        },
        "example": {
          "error_code": 40403,
          "message": "Schema not found"
        }
      },
      "Schema": {
        "type": "object",
        "required": [
          "subject",
          "version",
          "schema"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "description": "The name of the subject this schema belongs to."
          },
          "version": {
            "type": "integer",
            "description": "The version of the schema under the subject."
          },
          "id": {
            "type": "integer",
            "description": "The globally unique ID of the schema."
          },
          "schema": {
            "type": "string",
            "description": "The actual schema definition as a string."
          },
          "schemaType": {
            "type": "string",
            "description": "The type of the schema (AVRO, PROTOBUF, JSON). Default is AVRO."
          }
        }
      },
      "RegisterSchemaRequest": {
        "type": "object",
        "required": [
          "schema"
        ],
        "properties": {
          "schema": {
            "type": "string",
            "description": "The schema definition as a string."
          },
          "schemaType": {
            "type": "string",
            "description": "The schema format (AVRO, PROTOBUF, JSON). Default is AVRO."
          },
          "references": {
            "type": "array",
            "description": "A list of referenced schemas.",
            "items": {
              "$ref": "#/components/schemas/SchemaReference"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Optional metadata associated with the schema."
          },
          "ruleSet": {
            "type": "object",
            "description": "Optional ruleset configuration for the schema."
          }
        }
      },
      "SchemaReference": {
        "type": "object",
        "required": [
          "name",
          "subject",
          "version"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "version": {
            "type": "integer"
          }
        }
      },
      "SubjectVersion": {
        "type": "object",
        "required": [
          "subject",
          "version"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "description": "The name of the subject."
          },
          "version": {
            "type": "integer",
            "description": "The version number of the schema under the subject."
          }
        },
        "example": {
          "subject": "test-subject1",
          "version": 1
        }
      },
      "ModeUpdateResponse": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "READWRITE",
              "READONLY",
              "IMPORT"
            ],
            "description": "Current operating mode of the registry."
          }
        },
        "required": [
          "mode"
        ],
        "example": {
          "mode": "READWRITE"
        }
      },
      "ModeUpdateRequest": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "READWRITE",
              "READONLY",
              "IMPORT"
            ],
            "description": "The new global mode to set."
          }
        },
        "required": [
          "mode"
        ],
        "example": {
          "mode": "IMPORT"
        }
      },
      "CompatibilityCheckResponse": {
        "type": "object",
        "required": [
          "is_compatible"
        ],
        "properties": {
          "is_compatible": {
            "type": "boolean",
            "description": "True if the schema is compatible, false otherwise."
          }
        },
        "example": {
          "is_compatible": true
        }
      },
      "GlobalConfigUpdateRequest": {
        "type": "object",
        "properties": {
          "compatibility": {
            "type": "string",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ],
            "description": "New global compatibility level."
          },
          "alias": {
            "type": "string",
            "description": "Alias subject name used for resolution."
          },
          "normalize": {
            "type": "boolean",
            "description": "Automatically normalize schemas when registering or comparing."
          },
          "compatibilityGroup": {
            "type": "string",
            "description": "Group name for compatibility scoping."
          },
          "defaultMetadata": {
            "type": "object",
            "description": "Default metadata to be applied during schema registration."
          },
          "overrideMetadata": {
            "type": "object",
            "description": "Overrides metadata values on schema registration."
          },
          "defaultRuleSet": {
            "type": "object",
            "description": "Default ruleset to apply during registration."
          },
          "overrideRuleSet": {
            "type": "object",
            "description": "Overrides schema-level ruleset if present."
          }
        }
      },
      "GlobalConfigResponse": {
        "type": "object",
        "properties": {
          "compatibility": {
            "type": "string",
            "description": "The current global compatibility level."
          }
        },
        "example": {
          "compatibility": "FULL"
        }
      },
      "SubjectConfigResponse": {
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias subject name used for resolution."
          },
          "normalize": {
            "type": "boolean",
            "description": "Whether schemas are normalized during registration and lookups."
          },
          "compatibilityLevel": {
            "type": "string",
            "description": "The compatibility level for the subject.",
            "enum": [
              "BACKWARD",
              "BACKWARD_TRANSITIVE",
              "FORWARD",
              "FORWARD_TRANSITIVE",
              "FULL",
              "FULL_TRANSITIVE",
              "NONE"
            ]
          },
          "compatibilityGroup": {
            "type": "string",
            "description": "Only schemas in the same group will be compared for compatibility."
          },
          "defaultMetadata": {
            "type": "object",
            "description": "Default metadata applied during schema registration."
          },
          "overrideMetadata": {
            "type": "object",
            "description": "Override metadata applied during schema registration."
          },
          "defaultRuleSet": {
            "type": "object",
            "description": "Default ruleSet applied during schema registration."
          },
          "overrideRuleSet": {
            "type": "object",
            "description": "Override ruleSet applied during schema registration."
          }
        },
        "example": {
          "compatibilityLevel": "FULL",
          "normalize": false
        }
      }
    },
    "responses": {
      "Error": {
        "description": "Error returned by the Schema Registry API",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "application/octet-stream": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "application/vnd.schemaregistry.v1+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          },
          "application/vnd.schemaregistry+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Subjects",
      "description": ""
    },
    {
      "name": "Schemas",
      "description": ""
    },
    {
      "name": "Mode",
      "description": ""
    },
    {
      "name": "Config",
      "description": ""
    },
    {
      "name": "Compatibility",
      "description": ""
    }
  ]
}