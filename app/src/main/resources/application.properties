# Additional index dependencies

quarkus.index-dependency.jaxrs.group-id=org.jboss.spec.javax.ws.rs
quarkus.index-dependency.jaxrs.artifact-id=jboss-jaxrs-api_2.1_spec

# Name and description
registry.name=Apicurio Registry (In Memory)
registry.description=High performance, runtime registry for schemas and API designs.
registry.version=${project.version}
registry.date=${timestamp}


# === Dev profile - see README
%dev.quarkus.http.port=${HTTP_PORT:8080}
%dev.quarkus.log.level=${LOG_LEVEL:INFO}
%dev.quarkus.log.category."io.apicurio".level=${REGISTRY_LOG_LEVEL:DEBUG}
%dev.quarkus.log.console.enable=true
%dev.quarkus.package.type=legacy-jar

# === Prod profile - see README
# HTTP Port
%prod.quarkus.http.port=${HTTP_PORT:8080}
%prod.quarkus.package.type=legacy-jar


# Log
%prod.quarkus.log.level=${LOG_LEVEL:INFO}
%prod.quarkus.log.console.enable=true
%prod.quarkus.log.category."io.apicurio".level=${REGISTRY_LOG_LEVEL:INFO}

# UI Config
%dev.registry.ui.config.uiUrl=${REGISTRY_UI_CONFIG_UIURL:_}
%prod.registry.ui.config.uiUrl=${REGISTRY_UI_CONFIG_UIURL:_}
%dev.registry.ui.config.apiUrl=${REGISTRY_UI_CONFIG_APIURL:_}
%prod.registry.ui.config.apiUrl=${REGISTRY_UI_CONFIG_APIURL:_}

# UI Features
%dev.registry.ui.features.readOnly=${REGISTRY_UI_FEATURES_READONLY:false}
%prod.registry.ui.features.readOnly=${REGISTRY_UI_FEATURES_READONLY:false}

# Disable IBM API by default
registry.disable.apis=/apis/ibmcompat/.*

# Enable CORS always
quarkus.http.cors=true

# Disable OpenAPI class scanning
mp.openapi.scan.disable=true
mp.openapi.servers=/api

# The ignored error list
%dev.registry.liveness.errors.ignored=${LIVENESS_ERRORS_IGNORED:io.grpc.StatusRuntimeException,org.apache.kafka.streams.errors.InvalidStateStoreException}
%prod.registry.liveness.errors.ignored=${LIVENESS_ERRORS_IGNORED:io.grpc.StatusRuntimeException,org.apache.kafka.streams.errors.InvalidStateStoreException}

# Readiness and Liveness

%prod.registry.metrics.PersistenceExceptionLivenessCheck.errorThreshold=${LIVENESS_ERROR_THRESHOLD:5}
%prod.registry.metrics.PersistenceExceptionLivenessCheck.counterResetWindowDurationSec=${LIVENESS_COUNTER_RESET:30}
%prod.registry.metrics.PersistenceExceptionLivenessCheck.statusResetWindowDurationSec=${LIVENESS_STATUS_RESET:60}
%prod.registry.metrics.ResponseErrorLivenessCheck.errorThreshold=${LIVENESS_ERROR_THRESHOLD:5}
%prod.registry.metrics.ResponseErrorLivenessCheck.counterResetWindowDurationSec=${LIVENESS_COUNTER_RESET:30}
%prod.registry.metrics.ResponseErrorLivenessCheck.statusResetWindowDurationSec=${LIVENESS_STATUS_RESET:60}

%prod.registry.metrics.PersistenceTimeoutReadinessCheck.errorThreshold=${READINESS_ERROR_THRESHOLD:5}
%prod.registry.metrics.PersistenceTimeoutReadinessCheck.counterResetWindowDurationSec=${READINESS_COUNTER_RESET:30}
%prod.registry.metrics.PersistenceTimeoutReadinessCheck.statusResetWindowDurationSec=${READINESS_STATUS_RESET:60}
%prod.registry.metrics.PersistenceTimeoutReadinessCheck.timeoutSec=${READINESS_TIMEOUT:10}
%prod.registry.metrics.ResponseTimeoutReadinessCheck.errorThreshold=${READINESS_ERROR_THRESHOLD:5}
%prod.registry.metrics.ResponseTimeoutReadinessCheck.counterResetWindowDurationSec=${READINESS_COUNTER_RESET:30}
%prod.registry.metrics.ResponseTimeoutReadinessCheck.statusResetWindowDurationSec=${READINESS_STATUS_RESET:60}
%prod.registry.metrics.ResponseTimeoutReadinessCheck.timeoutSec=${READINESS_TIMEOUT:20}

# Events
# example
# %dev.registry.events.sink.eventdisplay=http://localhost:8888/
# compatibility with knative sink binding
%dev.registry.events.ksink=${K_SINK:}
%prod.registry.events.ksink=${K_SINK:}

%dev.registry.events.kafka.config.bootstrap.servers=${bootstrap.servers:localhost:9092}
%dev.registry.events.kafka.config.enable.idempotence=true
%dev.registry.events.kafka.config.retries=3
%dev.registry.events.kafka.config.acks=all

%prod.registry.events.kafka.config.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:}
%prod.registry.events.kafka.config.enable.idempotence=true
%prod.registry.events.kafka.config.retries=3
%prod.registry.events.kafka.config.acks=all

%test.registry.enable.multitenancy=false
%dev.registry.enable.multitenancy=false
%prod.registry.enable.multitenancy=false

registry.multitenancy.base.path=t
registry.tenant.manager.url=${TENANT_MANAGER_URL:http://localhost:8585}

# dynamic logging configuration
%dev.registry.logconfigjob.every=5s
%dev.registry.logconfigjob.delayed=1s

%prod.registry.logconfigjob.every=30s
%prod.registry.logconfigjob.delayed=15s

#Auth - disabled by default

registry.auth.enabled=${AUTH_ENABLED:false}
registry.auth.owner-only-authorization=${AUTHZ_ENABLED:false}
registry.auth.roles.admin=sr-admin
registry.auth.roles.developer=sr-developer
registry.auth.roles.readonly=sr-readonly

quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${registry.auth.enabled}

registry.keycloak.url=${KEYCLOAK_URL:http:localhost:8090}
registry.keycloak.realm=${KEYCLOAK_REALM:apicurio-local}

quarkus.oidc.auth-server-url=${registry.keycloak.url}/realms/${registry.keycloak.realm}
quarkus.oidc.client-id=${KEYCLOAK_API_CLIENT_ID:registry-api}
quarkus.oidc.client-secret=${KEYCLOAK_API_CLIENT_SECRET:default_secret}


registry.ui.config.auth.keycloak.url=${registry.keycloak.url}
registry.ui.config.auth.keycloak.realm=${registry.keycloak.realm}
registry.ui.config.auth.keycloak.clientId=${KEYCLOAK_UI_CLIENT_ID:apicurio-registry}
registry.ui.config.auth.keycloak.onLoad=login-required

# Common paths

quarkus.http.auth.permission.authenticated.enabled=${registry.auth.enabled}
quarkus.http.auth.permission.authenticated.paths=/apis/*
quarkus.http.auth.permission.authenticated.policy=authenticated

quarkus.http.auth.policy.sr-write-policy.roles-allowed=${registry.auth.roles.admin},${registry.auth.roles.developer}
quarkus.http.auth.permission.sr-write.enabled=${registry.auth.enabled}
quarkus.http.auth.permission.sr-write.paths=/apis/registry/v2/groups/*,/apis/registry/v1/artifacts/*,/apis/ccompat/v6/subjects/*,/cncf/v0/schemagroups/*,/apis/ibmcompat/v1/*
quarkus.http.auth.permission.sr-write.policy=sr-write-policy
quarkus.http.auth.permission.sr-write.methods=PUT,POST,DELETE,PATCH

quarkus.http.auth.policy.sr-read-policy.roles-allowed=${registry.auth.roles.admin},${registry.auth.roles.developer},${registry.auth.roles.readonly}
quarkus.http.auth.permission.sr-read.enabled=${registry.auth.enabled}
quarkus.http.auth.permission.sr-read.paths=/apis/registry/v2/ids/*,/apis/registry/v2/groups/*,/apis/registry/v1/artifacts/*,/apis/registry/v1/ids/*,/apis/ccompat/v6/subjects/*,/apis/ccompat/v6/schemas/*,/cncf/v0/schemagroups/*,/apis/ibmcompat/v1/*
quarkus.http.auth.permission.sr-read.policy=sr-read-policy
quarkus.http.auth.permission.sr-read.methods=GET,HEAD

quarkus.http.auth.policy.sr-read-post-policy.roles-allowed=${registry.auth.roles.admin},${registry.auth.roles.developer},${registry.auth.roles.readonly}
quarkus.http.auth.permission.sr-read-post.enabled=${registry.auth.enabled}
quarkus.http.auth.permission.sr-read-post.paths=,/apis/ccompat/v6/compatibility/*
quarkus.http.auth.permission.sr-read-post.policy=sr-read-post-policy
quarkus.http.auth.permission.sr-read-post.methods=POST

quarkus.http.auth.policy.sr-admin-policy.roles-allowed=${registry.auth.roles.admin}
quarkus.http.auth.permission.sr-admin.enabled=${registry.auth.enabled}
quarkus.http.auth.permission.sr-admin.paths=/apis/registry/v2/admin/*,/apis/registry/v1/rules/*,/apis/ccompat/v6/config,/apis/ccompat/v6/mode
quarkus.http.auth.permission.sr-admin.policy=sr-admin-policy
quarkus.http.auth.permission.sr-admin.methods=GET,HEAD,PUT,POST,DELETE,PATCH

quarkus.http.auth.policy.sr-search-policy.roles-allowed=${registry.auth.roles.admin},${registry.auth.roles.developer},${registry.auth.roles.readonly}
quarkus.http.auth.permission.sr-search.enabled=${registry.auth.enabled}
quarkus.http.auth.permission.sr-search.paths=/apis/registry/v2/search/*,/apis/registry/v1/search/*
quarkus.http.auth.permission.sr-search.policy=sr-search-policy
quarkus.http.auth.permission.sr-search.methods=GET,HEAD,PUT,POST,DELETE,PATCH


quarkus.http.auth.permission.permit1.enabled=${registry.auth.enabled}
quarkus.http.auth.permission.permit1.paths=/health,/openapi,/metrics/*,/apis/registry/v2/system/*
quarkus.http.auth.permission.permit1.policy=permit
quarkus.http.auth.permission.permit1.methods=GET

quarkus.http.non-application-root-path=/

# Test config

%test.quarkus.log.level=${LOG_LEVEL:WARN}
%test.quarkus.log.category."io.apicurio".level=${REGISTRY_LOG_LEVEL:INFO}
%test.quarkus.log.console.enable=true

# Disable liveness and readiness
%test.registry.metrics.ResponseTimeoutReadinessCheck.errorThreshold=10000
%test.registry.metrics.ResponseErrorLivenessCheck.errorThreshold=10000
%test.registry.metrics.ResponseErrorLivenessCheck.disableLogging=true
%test.registry.metrics.PersistenceTimeoutReadinessCheck.errorThreshold=10000
%test.registry.metrics.PersistenceExceptionLivenessCheck.errorThreshold=10000
%test.registry.metrics.PersistenceExceptionLivenessCheck.disableLogging=true

# The ignored error list
%test.registry.liveness.errors.ignored=${LIVENESS_ERRORS_IGNORED:io.grpc.StatusRuntimeException,org.apache.kafka.streams.errors.InvalidStateStoreException}

# UI Config
%test.registry.ui.config.uiUrl=${REGISTRY_UI_CONFIG_UIURL:_}
%test.registry.ui.config.apiUrl=${REGISTRY_UI_CONFIG_APIURL:_}

# UI Features
%test.registry.ui.features.readOnly=${REGISTRY_UI_FEATURES_READONLY:false}

%test.registry.events.kafka.config.bootstrap.servers=${bootstrap.servers:localhost:9092}
%test.registry.events.kafka.config.enable.idempotence=true
%test.registry.events.kafka.config.retries=3
%test.registry.events.kafka.config.acks=all

%test.registry.logconfigjob.every=1s
%test.registry.logconfigjob.delayed=1s


# Storage
%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=${REGISTRY_DATASOURCE_URL:jdbc:h2:mem:registry_db}
%dev.quarkus.datasource.username=${REGISTRY_DATASOURCE_USERNAME:sa}
%dev.quarkus.datasource.password=${REGISTRY_DATASOURCE_PASSWORD:sa}
%dev.quarkus.datasource.jdbc.initial-size=20
%dev.quarkus.datasource.jdbc.min-size=20
%dev.quarkus.datasource.jdbc.max-size=100
%dev.registry.sql.init=true

%prod.quarkus.datasource.db-kind=h2
%prod.quarkus.datasource.jdbc.url=${REGISTRY_DATASOURCE_URL:jdbc:h2:mem:registry_db}
%prod.quarkus.datasource.username=${REGISTRY_DATASOURCE_USERNAME:sa}
%prod.quarkus.datasource.password=${REGISTRY_DATASOURCE_PASSWORD:sa}
%prod.quarkus.datasource.jdbc.initial-size=20
%prod.quarkus.datasource.jdbc.min-size=20
%prod.quarkus.datasource.jdbc.max-size=100
%prod.registry.sql.init=true

%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:registry_db
#%test.quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost:9123/mem:registry;DB_CLOSE_DELAY=-1;IFEXISTS=FALSE;
%test.quarkus.datasource.jdbc.initial-size=20
%test.quarkus.datasource.jdbc.min-size=10
%test.quarkus.datasource.jdbc.max-size=20
%test.registry.sql.init=true
