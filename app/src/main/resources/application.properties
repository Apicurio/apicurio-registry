## Quarkus properties

# Authentication
quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=false
quarkus.oidc.auth-server-url=https://auth.apicur.io/auth/realms/apicurio-local
quarkus.oidc.token-path=https://auth.apicur.io/auth/realms/apicurio-local/protocol/openid-connect/token/
quarkus.oidc.client-id=registry-api
quarkus.http.auth.proactive=false

# Build time property to enable username and password SecurityIdentity
quarkus.security.users.embedded.enabled=true

# HTTP
quarkus.http.port=8080
quarkus.http.non-application-root-path=/
## Max HTTP request body size (large files needed to support Import functionality)
## (Set to 50MB)
quarkus.http.limits.max-body-size=52428800

quarkus.http.access-log.enabled=true
quarkus.http.access-log.pattern="apicurio-registry.access method="%{METHOD}" path="%{REQUEST_URL}" response_code="%{RESPONSE_CODE}" response_time="%{RESPONSE_TIME}" remote_ip="%{REMOTE_IP}" remote_user="%{REMOTE_USER}" user_agent="%{i,User-Agent}""
quarkus.http.access-log.exclude-pattern=/health/.*
quarkus.http.proxy.proxy-address-forwarding=false

quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:8888,http://127.0.0.1:8888
quarkus.http.cors.methods=GET,PUT,POST,PATCH,DELETE,OPTIONS
quarkus.http.cors.headers=x-registry-name,x-registry-name-encoded,x-registry-description,x-registry-description-encoded,x-registry-version,x-registry-artifactid,x-registry-artifacttype,x-registry-hash-algorithm,x-registry-content-hash,access-control-request-method,access-control-allow-credentials,access-control-allow-origin,access-control-allow-headers,authorization,content-type

# Logging
quarkus.log.level=WARN
quarkus.log.category."io.apicurio".level=DEBUG
quarkus.log.category."io.quarkus.http.access-log".level=INFO
quarkus.log.console.enable=true
quarkus.log.console.json=false
quarkus.log.console.format=%d{YYYY-MMx-dd HH:mm:ss} %p [%C] (%t) %m%n
quarkus.log.console.color=false
quarkus.log.category."io.quarkus.oidc.runtime.OidcProvider".level=DEBUG
quarkus.log.min-level=TRACE

# Metrics
quarkus.micrometer.enabled=true
quarkus.micrometer.binder.http-server.enabled=false
quarkus.micrometer.binder.http-client.enabled=false
quarkus.micrometer.export.prometheus.enabled=true
quarkus.datasource.metrics.enabled=true
quarkus.datasource.jdbc.enable-metrics=true

# Native
quarkus.native.resources.includes=io/apicurio/registry/storage/impl/sql/h2.ddl,i18n/*.properties,io/apicurio/registry/storage/impl/sql/postgresql.ddl
quarkus.native.additional-build-args=--initialize-at-run-time=org.apache.kafka.common.security.authenticator.SaslClientAuthenticator\\,org.eclipse.jgit\\,org.h2\\,org.postgres\\,com.microsoft.sqlserver\\,\
  --allow-incomplete-classpath

# Package
quarkus.package.type=legacy-jar
quarkus.index-dependency.jaxrs.group-id=jakarta.ws.rs
quarkus.index-dependency.jaxrs.artifact-id=jakarta.ws.rs-api


## Registry configuration

# Application
apicurio.app.id=apicurio-registry
apicurio.app.name=Apicurio Registry (In Memory)
apicurio.app.description=High performance, runtime registry for schemas and API designs.
apicurio.app.version=${project.version}
apicurio.app.date=${timestamp}

# Authentication
apicurio.authn.basic-client-credentials.enabled=false
apicurio.authn.basic-client-credentials.cache-expiration=5
apicurio.authn.audit.log.prefix=registry.audit

# Authorization
apicurio.auth.role-based-authorization=false
apicurio.auth.owner-only-authorization=false
apicurio.auth.owner-only-authorization.limit-group-access=false
apicurio.auth.anonymous-read-access.enabled=false
apicurio.auth.authenticated-read-access.enabled=false
apicurio.auth.roles.readonly=sr-readonly
apicurio.auth.roles.developer=sr-developer
apicurio.auth.roles.admin=sr-admin
apicurio.auth.role-source=token
apicurio.auth.role-source.header.name=X-Registry-Role
# Admin override indicates whether the existence of a role somewhere
# other than the primary role source can override the 'isAdmin' logic.  This
# is useful when using role-source=application to bypass the DB check when the
# user has some existing role or other claim in their token.
apicurio.auth.admin-override.enabled=false
apicurio.auth.admin-override.from=token
apicurio.auth.admin-override.type=role
apicurio.auth.admin-override.role=sr-admin
apicurio.auth.admin-override.claim=org-admin
apicurio.auth.admin-override.claim-value=true

# Cache
apicurio.storage.metrics.cache.check-period.ms=30000
apicurio.storage.metrics.cache.max-size=1000
apicurio.limits.config.cache.check-period=30000

# CCompatibility API

apicurio.ccompat.legacy-id-mode.enabled=false
apicurio.ccompat.max-subjects=1000
apicurio.ccompat.use-canonical-hash=false

# Config
apicurio.config.refresh.every=1m
apicurio.config.cache.enabled=true

# Downloads
apicurio.downloads.reaper.every=60s

# Dynamic config properties
apicurio.config.dynamic.allow-all=true
apicurio.auth.owner-only-authorization.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.auth.owner-only-authorization.limit-group-access.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.auth.anonymous-read-access.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.ccompat.legacy-id-mode.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.ccompat.use-canonical-hash.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.ccompat.max-subjects.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.download.href.ttl.seconds.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.ui.features.read-only.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.storage.read-only.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.authn.basic-client-credentials.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.rest.deletion.group.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.rest.deletion.artifact.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.rest.deletion.artifactVersion.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.semver.validation.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.semver.branching.enabled.dynamic.allow=${apicurio.config.dynamic.allow-all}
apicurio.semver.branching.coerce.dynamic.allow=${apicurio.config.dynamic.allow-all}

# Error
apicurio.api.errors.include-stack-in-response=false

# Events
apicurio.events.ksink=
apicurio.events.kafka.config.bootstrap.servers=localhost:9092
apicurio.events.kafka.config.enable.idempotence=true
apicurio.events.kafka.config.retries=3
apicurio.events.kafka.config.acks=all

# Logging
apicurio.logconfigjob.every=5s
apicurio.logconfigjob.delayed=1s

# Redirects
apicurio.redirects.enabled=true
apicurio.redirects.root=/,/apis

# Rest
apicurio.rest.artifact.download.maxSize.bytes=1000000
apicurio.rest.artifact.download.sslValidation.disabled=false
apicurio.rest.artifact.deletion.enabled=false
# Api date format
apicurio.apis.v2.date-format=yyyy-MM-dd'T'HH:mm:ss'Z'
apicurio.apis.v2.date-format-timezone=UTC

# Storage
apicurio.storage.kind=sql
apicurio.storage.snapshot.location=${java.io.tmpdir}
apicurio.import.workDir=${java.io.tmpdir}

## SQL Storage
apicurio.storage.sql.kind=h2
apicurio.datasource.url=jdbc:h2:mem:${quarkus.uuid}
apicurio.datasource.username=sa
apicurio.datasource.password=sa
apicurio.datasource.jdbc.initial-size=20
apicurio.datasource.jdbc.min-size=20
apicurio.datasource.jdbc.max-size=100
apicurio.sql.init=true

## Kafka SQL storage
apicurio.kafkasql.bootstrap.servers=localhost:9092
apicurio.kafkasql.topic=kafkasql-journal
apicurio.kafkasql.producer.client.id=${registry.id}-producer
apicurio.kafkasql.consumer.poll.timeout=5000
apicurio.kafkasql.consumer.group.id=${registry.id}-${quarkus.uuid}
apicurio.kafkasql.snapshot.every.seconds=86400s
apicurio.kafkasql.snapshots.topic=kafkasql-snapshots

# Security
apicurio.kafkasql.security.sasl.enabled=false
apicurio.kafkasql.security.sasl.mechanism=OAUTHBEARER
apicurio.kafkasql.security.sasl.client-id=sa
apicurio.kafkasql.security.sasl.client-secret=sa
apicurio.kafkasql.security.sasl.token.endpoint=http://localhost:8090
apicurio.kafkasql.security.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

## Gitops
apicurio.gitops.id=main
apicurio.gitops.repo.origin.uri=http://localhost
apicurio.gitops.repo.origin.branch=main
apicurio.gitops.refresh.every=30s
# Blue datasource
apicurio.datasource.blue.db-kind=h2
apicurio.datasource.blue.jdbc.url=jdbc:h2:mem:registry_blue
apicurio.datasource.blue.username=sa
apicurio.datasource.blue.password=sa
apicurio.datasource.blue.jdbc.initial-size=20
apicurio.datasource.blue.jdbc.min-size=20
apicurio.datasource.blue.jdbc.max-size=100
# Green datasource
apicurio.datasource.green.db-kind=h2
apicurio.datasource.green.jdbc.url=jdbc:h2:mem:registry_green
apicurio.datasource.green.username=sa
apicurio.datasource.green.password=sa
apicurio.datasource.green.jdbc.initial-size=20
apicurio.datasource.green.jdbc.min-size=20
apicurio.datasource.green.jdbc.max-size=100

# UI
apicurio.ui.auth.oidc.client-id=default_client
apicurio.ui.auth.oidc.redirect-uri=http://localhost:8080

# Disable OpenAPI class scanning
mp.openapi.scan.disable=true
mp.openapi.servers=/api