quarkus.native.resources.includes=io/apicurio/registry/storage/impl/sql/h2.ddl

# Additional index dependencies
quarkus.index-dependency.jaxrs.group-id=org.jboss.spec.javax.ws.rs
quarkus.index-dependency.jaxrs.artifact-id=jboss-jaxrs-api_2.1_spec

# Name and description
registry.name=Apicurio Registry (In Memory)
registry.description=High performance, runtime registry for schemas and API designs.
registry.version=${project.version}
registry.date=${timestamp}

# Basic logging
quarkus.log.console.format=%d{YYYY-MM-DD HH:mm:ss} %p <%X{tenantId}> [%C] (%t) %m%n

# === Dev profile - see README
%dev.quarkus.http.port=${HTTP_PORT:8080}
%dev.quarkus.log.level=${LOG_LEVEL:INFO}
%dev.quarkus.log.category."io.apicurio".level=${REGISTRY_LOG_LEVEL:DEBUG}
%dev.quarkus.log.console.enable=true
%dev.quarkus.package.type=legacy-jar

# === Prod profile - see README
# HTTP Port
%prod.quarkus.http.port=${HTTP_PORT:8080}
%prod.quarkus.package.type=legacy-jar


# Log
%prod.quarkus.log.level=${LOG_LEVEL:INFO}
%prod.quarkus.log.console.enable=true
%prod.quarkus.log.category."io.apicurio".level=${REGISTRY_LOG_LEVEL:INFO}

# UI Config
%dev.registry.ui.config.uiContextPath=${REGISTRY_UI_CONFIG_UI_CONTEXT_PATH:/ui/}
%prod.registry.ui.config.uiContextPath=${REGISTRY_UI_CONFIG_UI_CONTEXT_PATH:/ui/}
%dev.registry.ui.config.apiUrl=${REGISTRY_UI_CONFIG_APIURL:_}
%prod.registry.ui.config.apiUrl=${REGISTRY_UI_CONFIG_APIURL:_}

# UI Features
%dev.registry.ui.features.readOnly=${REGISTRY_UI_FEATURES_READONLY:false}
%prod.registry.ui.features.readOnly=${REGISTRY_UI_FEATURES_READONLY:false}

# Disable IBM API by default
registry.disable.apis=/apis/ibmcompat/.*

# Enable CORS always
quarkus.http.cors=true

# Disable OpenAPI class scanning
mp.openapi.scan.disable=true
mp.openapi.servers=/api

# The ignored error list
%dev.registry.liveness.errors.ignored=${LIVENESS_ERRORS_IGNORED:}
%prod.registry.liveness.errors.ignored=${LIVENESS_ERRORS_IGNORED:}

# Readiness and Liveness

%prod.registry.metrics.PersistenceExceptionLivenessCheck.errorThreshold=${LIVENESS_ERROR_THRESHOLD:5}
%prod.registry.metrics.PersistenceExceptionLivenessCheck.counterResetWindowDurationSec=${LIVENESS_COUNTER_RESET:30}
%prod.registry.metrics.PersistenceExceptionLivenessCheck.statusResetWindowDurationSec=${LIVENESS_STATUS_RESET:60}
%prod.registry.metrics.ResponseErrorLivenessCheck.errorThreshold=${LIVENESS_ERROR_THRESHOLD:5}
%prod.registry.metrics.ResponseErrorLivenessCheck.counterResetWindowDurationSec=${LIVENESS_COUNTER_RESET:30}
%prod.registry.metrics.ResponseErrorLivenessCheck.statusResetWindowDurationSec=${LIVENESS_STATUS_RESET:60}

%prod.registry.metrics.PersistenceTimeoutReadinessCheck.errorThreshold=${READINESS_ERROR_THRESHOLD:5}
%prod.registry.metrics.PersistenceTimeoutReadinessCheck.counterResetWindowDurationSec=${READINESS_COUNTER_RESET:30}
%prod.registry.metrics.PersistenceTimeoutReadinessCheck.statusResetWindowDurationSec=${READINESS_STATUS_RESET:60}
%prod.registry.metrics.PersistenceTimeoutReadinessCheck.timeoutSec=${READINESS_TIMEOUT:10}
%prod.registry.metrics.ResponseTimeoutReadinessCheck.errorThreshold=${READINESS_ERROR_THRESHOLD:5}
%prod.registry.metrics.ResponseTimeoutReadinessCheck.counterResetWindowDurationSec=${READINESS_COUNTER_RESET:30}
%prod.registry.metrics.ResponseTimeoutReadinessCheck.statusResetWindowDurationSec=${READINESS_STATUS_RESET:60}
%prod.registry.metrics.ResponseTimeoutReadinessCheck.timeoutSec=${READINESS_TIMEOUT:20}

# Events
# example
# %dev.registry.events.sink.eventdisplay=http://localhost:8888/
# compatibility with knative sink binding
%dev.registry.events.ksink=${K_SINK:}
%prod.registry.events.ksink=${K_SINK:}

%dev.registry.events.kafka.config.bootstrap.servers=${bootstrap.servers:localhost:9092}
%dev.registry.events.kafka.config.enable.idempotence=true
%dev.registry.events.kafka.config.retries=3
%dev.registry.events.kafka.config.acks=all

%prod.registry.events.kafka.config.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:}
%prod.registry.events.kafka.config.enable.idempotence=true
%prod.registry.events.kafka.config.retries=3
%prod.registry.events.kafka.config.acks=all

%test.registry.enable.multitenancy=false
%dev.registry.enable.multitenancy=false
%prod.registry.enable.multitenancy=false

registry.multitenancy.base.path=t
registry.organization-id.claim-name=${ORGANIZATION_ID_CLAIM:rh_org_id}
registry.tenant.manager.url=${TENANT_MANAGER_URL:http://localhost:8585}

registry.tenant.manager.auth.url=${TENANT_MANAGER_AUTH_URL:http://localhost:8090/auth}
registry.tenant.manager.auth.realm=${TENANT_MANAGER_REALM:registry}
registry.tenant.manager.auth.client-id=${TENANT_MANAGER_CLIENT_ID:registry-api}
registry.tenant.manager.auth.client-secret=${TENANT_MANAGER_CLIENT_SECRET:default_secret}

registry.storage.metrics.cache.check-period=30000
registry.limits.config.cache.check-period=30000

# dynamic logging configuration
%dev.registry.logconfigjob.every=5s
%dev.registry.logconfigjob.delayed=1s

%prod.registry.logconfigjob.every=30s
%prod.registry.logconfigjob.delayed=15s

#Auth - disabled by default

registry.auth.enabled=${AUTH_ENABLED:false}
registry.auth.owner-only-authorization=${OWNER_ONLY_AUTHZ_ENABLED:false}
registry.auth.role-based-authorization=${ROLE_BASED_AUTHZ_ENABLED:false}
registry.auth.role-source=${ROLE_BASED_AUTHZ_SOURCE:token}
# Admin override indicates whether the existence of a role somewhere 
# other than the primary role source can override the 'isAdmin' logic.  This
# is useful when using role-source=database to bypass the DB check when the
# user has some existing role or other claim in their token.
registry.auth.admin-override.enabled=true
registry.auth.admin-override.from=token
registry.auth.admin-override.type=role
registry.auth.admin-override.role=sr-admin
registry.auth.roles.admin=sr-admin
registry.auth.roles.developer=sr-developer
registry.auth.roles.readonly=sr-readonly

quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${registry.auth.enabled}

registry.keycloak.url=${KEYCLOAK_URL:http://localhost:8090/auth}
registry.keycloak.realm=${KEYCLOAK_REALM:apicurio-local}

quarkus.oidc.auth-server-url=${registry.keycloak.url}/realms/${registry.keycloak.realm}
quarkus.oidc.client-id=${KEYCLOAK_API_CLIENT_ID:registry-api}
registry.auth.client-secret=${KEYCLOAK_API_CLIENT_SECRET:}


registry.ui.config.auth.keycloak.url=${registry.keycloak.url}
registry.ui.config.auth.keycloak.realm=${registry.keycloak.realm}
registry.ui.config.auth.keycloak.clientId=${KEYCLOAK_UI_CLIENT_ID:apicurio-registry}
registry.ui.config.auth.keycloak.onLoad=login-required

quarkus.http.non-application-root-path=/

# Test config

%test.quarkus.log.level=${LOG_LEVEL:WARN}
%test.quarkus.log.category."io.apicurio".level=${REGISTRY_LOG_LEVEL:INFO}
%test.quarkus.log.console.enable=true

# Disable liveness and readiness
%test.registry.metrics.ResponseTimeoutReadinessCheck.errorThreshold=10000
%test.registry.metrics.ResponseErrorLivenessCheck.errorThreshold=10000
%test.registry.metrics.ResponseErrorLivenessCheck.disableLogging=true
%test.registry.metrics.PersistenceTimeoutReadinessCheck.errorThreshold=10000
%test.registry.metrics.PersistenceExceptionLivenessCheck.errorThreshold=10000
%test.registry.metrics.PersistenceExceptionLivenessCheck.disableLogging=true

# The ignored error list
%test.registry.liveness.errors.ignored=${LIVENESS_ERRORS_IGNORED:}

# UI Config
%test.registry.ui.config.uiContextPath=${REGISTRY_UI_CONFIG_UI_CONTEXT_PATH:/ui/}
%test.registry.ui.config.apiUrl=${REGISTRY_UI_CONFIG_APIURL:_}

# UI Features
%test.registry.ui.features.readOnly=${REGISTRY_UI_FEATURES_READONLY:false}

%test.registry.events.kafka.config.bootstrap.servers=${bootstrap.servers:localhost:9092}
%test.registry.events.kafka.config.enable.idempotence=true
%test.registry.events.kafka.config.retries=3
%test.registry.events.kafka.config.acks=all

%test.registry.logconfigjob.every=1s
%test.registry.logconfigjob.delayed=1s


# Storage
%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=${REGISTRY_DATASOURCE_URL:jdbc:h2:mem:registry_db}
%dev.quarkus.datasource.username=${REGISTRY_DATASOURCE_USERNAME:sa}
%dev.quarkus.datasource.password=${REGISTRY_DATASOURCE_PASSWORD:sa}
%dev.quarkus.datasource.jdbc.initial-size=20
%dev.quarkus.datasource.jdbc.min-size=20
%dev.quarkus.datasource.jdbc.max-size=100
%dev.registry.sql.init=true

%prod.quarkus.datasource.db-kind=h2
%prod.quarkus.datasource.jdbc.url=${REGISTRY_DATASOURCE_URL:jdbc:h2:mem:registry_db}
%prod.quarkus.datasource.username=${REGISTRY_DATASOURCE_USERNAME:sa}
%prod.quarkus.datasource.password=${REGISTRY_DATASOURCE_PASSWORD:sa}
%prod.quarkus.datasource.jdbc.initial-size=20
%prod.quarkus.datasource.jdbc.min-size=20
%prod.quarkus.datasource.jdbc.max-size=100
%prod.registry.sql.init=true

%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:registry_db
#%test.quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost:9123/mem:registry;DB_CLOSE_DELAY=-1;IFEXISTS=FALSE;
%test.quarkus.datasource.jdbc.initial-size=20
%test.quarkus.datasource.jdbc.min-size=10
%test.quarkus.datasource.jdbc.max-size=20
%test.registry.sql.init=true

# Metrics

%dev.quarkus.micrometer.enabled=true
%dev.quarkus.micrometer.binder.http-server.enabled=false
%dev.quarkus.micrometer.binder.http-client.enabled=false
%dev.quarkus.micrometer.export.prometheus.enabled=true
%dev.quarkus.datasource.metrics.enabled=true
%dev.quarkus.datasource.jdbc.enable-metrics=true

%prod.quarkus.micrometer.enabled=true
%prod.quarkus.micrometer.binder.http-server.enabled=false
%prod.quarkus.micrometer.binder.http-client.enabled=false
%prod.quarkus.micrometer.export.prometheus.enabled=true
%prod.quarkus.datasource.metrics.enabled=true
%prod.quarkus.datasource.jdbc.enable-metrics=true

%test.quarkus.micrometer.enabled=true
%test.quarkus.micrometer.binder.http-server.enabled=false
%test.quarkus.micrometer.binder.http-client.enabled=false
%test.quarkus.micrometer.export.prometheus.enabled=true
%test.quarkus.datasource.metrics.enabled=true
%test.quarkus.datasource.jdbc.enable-metrics=true
