apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: multitenant-apicurio-registry
labels:
  template: multitenant-apicurio-registry
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: apicurio-registry
      template: multitenant-apicurio-registry
      component: apicurio-registry
    name: apicurio-registry
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: http
    selector:
      app: apicurio-registry
      template: multitenant-apicurio-registry

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: apicurio-registry
      template: multitenant-apicurio-registry
      component: apicurio-registry-envoy
    name: apicurio-registry-envoy
  spec:
    ports:
    - port: 9001
      protocol: TCP
      targetPort: 9001
      name: api-envoy
    selector:
      app: apicurio-registry
      template: multitenant-apicurio-registry

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: apicurio-registry
      template: multitenant-apicurio-registry
      component: apicurio-registry-envoy-metrics
    name: apicurio-registry-envoy-metrics
  spec:
    ports:
    - port: 9000
      protocol: TCP
      targetPort: 9000
      name: metrics-envoy
    selector:
      app: apicurio-registry
      template: multitenant-apicurio-registry

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: apicurio-registry
      template: multitenant-apicurio-registry
      component: tenant-manager
    name: tenant-manager
  spec:
    ports:
    - port: 8585
      protocol: TCP
      targetPort: 8585
      name: http
    selector:
      app: apicurio-registry
      template: multitenant-apicurio-registry

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: apicurio-registry
      template: multitenant-apicurio-registry
    name: apicurio-registry
  spec:
    selector:
      matchLabels:
        app: apicurio-registry
        template: multitenant-apicurio-registry
    replicas: ${{REPLICAS}}
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: apicurio-registry
          template: multitenant-apicurio-registry
      spec:
        serviceAccount: ${SERVICE_ACCOUNT_NAME}
        serviceAccountName: ${SERVICE_ACCOUNT_NAME}
        volumes:
        - name: envoy-config
          configMap:
            name: ${ENVOY_CONFIG_CM_NAME}
        - name: envoy-unix-sockets
          emptyDir:
            medium: Memory

        containers:
        - name: apicurio-registry
          image: ${IMAGE_REGISTRY}/${APICURIO_REGISTRY_IMAGE_REPOSITORY}:${IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          env:
          - name: REGISTRY_ENABLE_MULTITENANCY
            value: "true"
          - name: REGISTRY_LOG_LEVEL
            value: ${REGISTRY_LOG_LEVEL}
          - name: LOG_LEVEL
            value: ${REGISTRY_QUARKUS_LOG_LEVEL}
          - name: QUARKUS_PROFILE
            value: prod

          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.host
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.port
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.name
          - name: REGISTRY_DATASOURCE_URL
            value: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
          - name: REGISTRY_DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.user
          - name: REGISTRY_DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.password
          
          - name: AUTH_ENABLED
            value: ${AUTH_ENABLED}
          - name: KEYCLOAK_URL
            value: ${KEYCLOAK_URL}
          - name: KEYCLOAK_REALM
            value: ${KEYCLOAK_REALM}
          - name: KEYCLOAK_API_CLIENT_ID
            value: ${KEYCLOAK_API_CLIENT_ID}

          - name: OWNER_ONLY_AUTHZ_ENABLED
            value: ${OWNER_ONLY_AUTHZ_ENABLED}
          - name: ROLE_BASED_AUTHZ_ENABLED
            value: ${ROLE_BASED_AUTHZ_ENABLED}
          - name: REGISTRY_AUTH_ADMIN-OVERRIDE_ENABLED
            value: ${REGISTRY_AUTH_ADMIN-OVERRIDE_ENABLED}
          - name: REGISTRY_AUTH_ADMIN-OVERRIDE_FROM
            value: ${REGISTRY_AUTH_ADMIN-OVERRIDE_FROM}
          - name: REGISTRY_AUTH_ADMIN-OVERRIDE_TYPE
            value: ${REGISTRY_AUTH_ADMIN-OVERRIDE_TYPE}
          - name: REGISTRY_AUTH_ADMIN-OVERRIDE_ROLE
            value: ${REGISTRY_AUTH_ADMIN-OVERRIDE_ROLE}
          - name: REGISTRY_AUTH_ADMIN-OVERRIDE_CLAIM
            value: ${REGISTRY_AUTH_ADMIN-OVERRIDE_CLAIM}
          - name: REGISTRY_AUTH_ADMIN-OVERRIDE_CLAIM-VALUE
            value: ${REGISTRY_AUTH_ADMIN-OVERRIDE_CLAIM-VALUE}
          - name: REGISTRY_AUTH_ROLES_ADMIN
            value: ${REGISTRY_AUTH_ROLES_ADMIN}
          - name: REGISTRY_AUTH_ROLES_DEVELOPER
            value: ${REGISTRY_AUTH_ROLES_DEVELOPER}
          - name: REGISTRY_AUTH_ROLES_READONLY
            value: ${REGISTRY_AUTH_ROLES_READONLY}

          - name: TENANT_MANAGER_AUTH_URL
            value: ${KEYCLOAK_URL}
          - name: TENANT_MANAGER_REALM
            value: ${KEYCLOAK_REALM}
          - name: TENANT_MANAGER_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: ${TENANT_MANAGER_CLIENT_SECRET_NAME}
                key: client-id
          - name: TENANT_MANAGER_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: ${TENANT_MANAGER_CLIENT_SECRET_NAME}
                key: client-secret

          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: ${APICURIO_REGISTRY_CPU_LIMIT}
              memory: ${APICURIO_REGISTRY_MEMORY_LIMIT}
            requests:
              cpu: ${APICURIO_REGISTRY_CPU_REQUEST}
              memory: ${APICURIO_REGISTRY_MEMORY_REQUEST}
          terminationMessagePath: /dev/termination-log
        - name: tenant-manager
          image: ${IMAGE_REGISTRY}/${TENANT_MANAGER_IMAGE_REPOSITORY}:${IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.host
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.port
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.name
          - name: DATASOURCE_URL
            value: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
          - name: DATASOURCE_USERNAME
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.user
          - name: DATASOURCE_PASSWORD
            valueFrom:
              secretKeyRef:
                name:  ${DATABASE_SECRET_NAME}
                key:  db.password

          - name: REGISTRY_ROUTE_URL
            value: http://localhost:8080
          - name: QUARKUS_HTTP_PORT
            value: "8585"
          - name: LOG_LEVEL
            value: ${TENANT_MANAGER_QUARKUS_LOG_LEVEL}
          - name: TENANT_MANAGER_LOG_LEVEL
            value: ${TENANT_MANAGER_LOG_LEVEL}

          - name: AUTH_ENABLED
            value: ${AUTH_ENABLED}
          - name: KEYCLOAK_URL
            value: ${KEYCLOAK_URL}
          - name: KEYCLOAK_REALM
            value: ${KEYCLOAK_REALM}
          - name: KEYCLOAK_API_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: ${TENANT_MANAGER_CLIENT_SECRET_NAME}
                key: client-id

          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: 8585
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
          - containerPort: 8585
            protocol: TCP
            name: http
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /q/health/ready
              port: 8585
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: ${TENANT_MANAGER_CPU_LIMIT}
              memory: ${TENANT_MANAGER_MEMORY_LIMIT}
            requests:
              cpu: ${TENANT_MANAGER_CPU_REQUEST}
              memory: ${TENANT_MANAGER_MEMORY_REQUEST}
          terminationMessagePath: /dev/termination-log
        - name: envoy
          image: ${ENVOY_IMAGE}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: envoy-config
            mountPath: /configs/envoy
          - name: envoy-unix-sockets
            mountPath: /sockets
          command:
          - envoy
          - --config-path
          - /configs/envoy/main.yaml
          ports:
          - name: api-envoy
            protocol: TCP
            containerPort: 9001
          - name: metrics-envoy
            protocol: TCP
            containerPort: 9000
          livenessProbe:
            httpGet:
              path: /ready
              port: 9000
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 9000
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          resources:
            requests:
              memory: 256Mi
              cpu: 250m
            limits:
              memory: 512Mi
              cpu: 500m


parameters:

- name: REGISTRY_LOG_LEVEL
  value: DEBUG

- name: REGISTRY_QUARKUS_LOG_LEVEL
  value: INFO

- name: TENANT_MANAGER_LOG_LEVEL
  value: DEBUG

- name: TENANT_MANAGER_QUARKUS_LOG_LEVEL
  value: INFO

- name: SERVICE_ACCOUNT_NAME
  displayName: Service Account to use for the deployment
  required: true

- name: REPLICAS
  description: Number of replicas of the service to run.
  value: "3"

- name: IMAGE_REGISTRY
  displayName: Image Registry
  required: true

- name: APICURIO_REGISTRY_IMAGE_REPOSITORY
  displayName: Apicurio Registry Image Repository
  required: true

- name: TENANT_MANAGER_IMAGE_REPOSITORY
  displayName: Tenant Manager Image Repository
  required: true

- name: IMAGE_TAG
  displayName: Image tag for Apicurio Registry and Tenant Manager
  value: latest


- name: APICURIO_REGISTRY_MEMORY_REQUEST
  description: Apicurio Registry Memory request.
  value: "600Mi"

- name: APICURIO_REGISTRY_MEMORY_LIMIT
  description: Apicurio Registry Memory limit.
  value: "1300Mi"

- name: APICURIO_REGISTRY_CPU_REQUEST
  description: Apicurio Registry CPU request.
  value: "200m"

- name: APICURIO_REGISTRY_CPU_LIMIT
  description: Apicurio Registry CPU limit.
  value: "1000m"


- name: TENANT_MANAGER_MEMORY_REQUEST
  description: Tenant Manager Memory request.
  value: "600Mi"

- name: TENANT_MANAGER_MEMORY_LIMIT
  description: Tenant Manager  Memory limit.
  value: "1000Mi"

- name: TENANT_MANAGER_CPU_REQUEST
  description: Tenant Manager  CPU request.
  value: "200m"

- name: TENANT_MANAGER_CPU_LIMIT
  description: Tenant Manager CPU limit.
  value: "500m"

- name: DATABASE_SECRET_NAME
  description: Secret name with database connection details
  required: true

- name: AUTH_ENABLED
  value: "false"
- name: KEYCLOAK_URL
  description: Keycloak base url
  value: "http://localhost:8090"
- name: KEYCLOAK_REALM
  description: Keycloak realm
  value: "apicurio-registry"
- name: KEYCLOAK_API_CLIENT_ID
  description: client id for Apicurio Registry API
  value: registry-api

- name: OWNER_ONLY_AUTHZ_ENABLED
  description: flag to enable/disable owner-only authorization
  value: "false"
- name: ROLE_BASED_AUTHZ_ENABLED
  description: flag to enable/disable role based authorization
  value: "false"
- name: REGISTRY_AUTH_ADMIN-OVERRIDE_ENABLED
  description: flag to enable/disable the admin-override auth feature
  value: "false"
- name: REGISTRY_AUTH_ADMIN-OVERRIDE_FROM
  description: property to set where to get admin-override meta-data from (e.g. token)
  value: "token"
- name: REGISTRY_AUTH_ADMIN-OVERRIDE_TYPE
  description: property to set the type of admin-override meta-data (e.g. role or claim)
  value: "role"
- name: REGISTRY_AUTH_ADMIN-OVERRIDE_ROLE
  description: property to set the role that activates admin-override (e.g. sr-admin)
  value: "sr-admin"
- name: REGISTRY_AUTH_ADMIN-OVERRIDE_CLAIM
  description: property to set the claim that potentially activates admin-override
  value: "is_org_admin"
- name: REGISTRY_AUTH_ADMIN-OVERRIDE_CLAIM-VALUE
  description: property to set the claim value that must match to activate admin-override
  value: "true"
- name: REGISTRY_AUTH_ROLES_ADMIN
  description: property to set the name of the role that enables Admin access when using token based RBAC
  value: "sr-admin"
- name: REGISTRY_AUTH_ROLES_DEVELOPER
  description: property to set the name of the role that enables Developer access when using token based RBAC
  value: "sr-developer"
- name: REGISTRY_AUTH_ROLES_READONLY
  description: property to set the name of the role that enables ReadOnly access when using token based RBAC
  value: "sr-readonly"

- name: TENANT_MANAGER_CLIENT_SECRET_NAME
  description: k8s secret name with client-id and client-secret to access tenant-manager
  required: true

- name: ENVOY_IMAGE
  description: Envoy image.
  value: envoyproxy/envoy:v1.16.1
- name: ENVOY_CONFIG_CM_NAME
  description: ConfigMap containing Envoy config file
  value: apicurio-registry-envoy-config