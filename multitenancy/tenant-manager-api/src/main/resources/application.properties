
# Test profile properties

%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:test
%test.quarkus.hibernate-orm.log.sql=false

%test.quarkus.flyway.locations=db/migration/h2
%test.quarkus.hibernate-orm.database.default-schema=TENANTMANAGER
%test.quarkus.flyway.schemas=TENANTMANAGER

%test.registry.route.url=http://localhost:38080

# Dev profile properties

%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
%dev.quarkus.hibernate-orm.log.sql=true

%dev.quarkus.flyway.locations=db/migration/h2

# Prod profile properties

%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=${DATASOURCE_USERNAME}
%prod.quarkus.datasource.password=${DATASOURCE_PASSWORD}
%prod.quarkus.datasource.jdbc.url=${DATASOURCE_URL}

%prod.quarkus.flyway.locations=db/migration/postgresql

quarkus.hibernate-orm.database.default-schema=${TENANT_MANAGER_DEFAULT_SCHEMA:tenantmanager}
quarkus.hibernate-orm.database.generation=none
quarkus.flyway.create-schemas=true
quarkus.flyway.schemas=${TENANT_MANAGER_DEFAULT_SCHEMA:tenantmanager}
quarkus.flyway.migrate-at-start=true

# ===

quarkus.log.level=${LOG_LEVEL:INFO}
quarkus.log.category."io.apicurio".level=${TENANT_MANAGER_LOG_LEVEL:DEBUG}
quarkus.log.console.enable=true
quarkus.package.type=legacy-jar
quarkus.http.port=${HTTP_PORT:8585}
quarkus.http.cors=true

# Access logs
quarkus.http.access-log.enabled=${ENABLE_ACCESS_LOG:false}
quarkus.http.access-log.pattern="tenant-manager.access method="%{METHOD}" path="%{REQUEST_URL}" response_code="%{RESPONSE_CODE}" response_time="%{RESPONSE_TIME}" remote_ip="%{REMOTE_IP}" remote_user="%{REMOTE_USER}" user_agent="%{i,User-Agent}""
#this property will be used by Quarkus 2.X
quarkus.http.access-log.exclude-pattern=/q/.*

# Sentry - the rest of the sentry configuration is picked from sentry own env vars
tenant-manager.enable.sentry=${ENABLE_SENTRY:false}

#Auth - disabled by default

tenant-manager.auth.enabled=${AUTH_ENABLED:false}

quarkus.oidc.enabled=true
quarkus.oidc.tenant-enabled=${tenant-manager.auth.enabled}

tenant-manager.keycloak.url=${KEYCLOAK_URL:http://localhost:8090/auth}
tenant-manager.keycloak.realm=${KEYCLOAK_REALM:apicurio-local}

tenant-manager.keycloak.url.configured=${tenant-manager.keycloak.url}/realms/${tenant-manager.keycloak.realm}/protocol/openid-connect/token

quarkus.oidc.auth-server-url=${tenant-manager.keycloak.url}/realms/${tenant-manager.keycloak.realm}
quarkus.oidc.client-id=${KEYCLOAK_API_CLIENT_ID:registry-api}

quarkus.http.auth.permission.authenticated.enabled=${tenant-manager.auth.enabled}
quarkus.http.auth.permission.authenticated.paths=/api/*
quarkus.http.auth.permission.authenticated.policy=authenticated

# Name and description
tenant-manager.name=Tenant Manager for Apicurio Registry MT
tenant-manager.description=Tenant manager for the Apicurio Registry multi-tenant deployment.
tenant-manager.version=${project.version}
tenant-manager.date=${timestamp}

# use only for tests, to enable tenant status transition from DELETED to READY
tenant-manager.status-transitions.additional-allowed-test-transition=${ENABLE_TEST_STATUS_TRANSITION:false}

# === Metrics

quarkus.micrometer.enabled=true
quarkus.micrometer.registry-enabled-default=true
#disabling http server metrics because of quarkus micrometer bug
quarkus.micrometer.binder.http-server.enabled=false
quarkus.micrometer.export.prometheus.enabled=true
quarkus.datasource.metrics.enabled=true
quarkus.datasource.jdbc.enable-metrics=true

tenant-manager.metrics.usage-statistics.cache-expiration-period-seconds=${METRICS_CACHE_EXPIRATION_PERIOD_SECONDS:300}

#
quarkus.native.resources.includes=db/migration/postgresql/*.sql
