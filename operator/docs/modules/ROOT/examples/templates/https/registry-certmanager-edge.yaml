# This example template deploys Registry with an edge-terminated HTTPS route, with a self-signed certificate using cert-manager operator.
#
# Steps:
#
# 1. Create or select a namespace:
#
# oc new-project registry-certmanager-edge
#
# 2. Install the operator(s):
#
#  - Red Hat Integration - Service Registry Operator
#  - cert-manager Operator for Red Hat OpenShift
#
# 3. Apply the template:
#
# oc process -f registry-certmanager-edge.yaml \
#   -p NAMESPACE=registry-certmanager-edge \
#   -p INGRESS_ROUTER_CANONICAL_HOSTNAME=router-default.apps.apicur.eastus.aroapp.io \
#  | oc apply -f - && oc wait --for=condition=ready apicurioregistry registry-certmanager-edge --timeout=120s
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: registry-certmanager-edge-template
labels:
  template: registry-certmanager-edge-template
objects:
  # PostgreSQL storage
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: registry-certmanager-edge-postgres
      namespace: ${NAMESPACE}
      labels:
        app: registry-certmanager-edge-postgres
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: registry-certmanager-edge-postgres
      template:
        metadata:
          labels:
            app: registry-certmanager-edge-postgres
        spec:
          containers:
            - resources:
                limits:
                  cpu: 1000m
                  memory: 1024Mi
                requests:
                  cpu: 500m
                  memory: 512Mi
              readinessProbe:
                tcpSocket:
                  port: 5432
                initialDelaySeconds: 5
                timeoutSeconds: 1
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              terminationMessagePath: /dev/termination-log
              name: postgresql
              livenessProbe:
                tcpSocket:
                  port: 5432
                initialDelaySeconds: 15
                timeoutSeconds: 1
                periodSeconds: 20
                successThreshold: 1
                failureThreshold: 3
              env:
                - name: POSTGRESQL_PASSWORD
                  value: ${POSTGRESQL_PASSWORD}
                - name: POSTGRESQL_USER
                  value: ${POSTGRESQL_USER}
                - name: POSTGRESQL_DATABASE
                  value: ${POSTGRESQL_DATABASE}
              ports:
                - containerPort: 5432
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              terminationMessagePolicy: File
              image: quay.io/centos7/postgresql-12-centos7:1
              securityContext:
                allowPrivilegeEscalation: false
                runAsNonRoot: true
                capabilities:
                  drop:
                    - ALL
                seccompProfile:
                  type: RuntimeDefault
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: { }
          schedulerName: default-scheduler
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600
  - kind: Service
    apiVersion: v1
    metadata:
      name: registry-certmanager-edge-postgres
      namespace: ${NAMESPACE}
      labels:
        app: registry-certmanager-edge-postgres
    spec:
      ports:
        - protocol: TCP
          port: 5432
          targetPort: 5432
      type: ClusterIP
      selector:
        app: registry-certmanager-edge-postgres
  # Registry
  - apiVersion: registry.apicur.io/v1
    kind: ApicurioRegistry
    metadata:
      name: registry-certmanager-edge
      namespace: ${NAMESPACE}
    spec:
      configuration:
        persistence: sql
        sql:
          dataSource:
            url: jdbc:postgresql://registry-certmanager-edge-postgres.${NAMESPACE}.svc.cluster.local:5432/${POSTGRESQL_DATABASE}
            userName: ${POSTGRESQL_USER}
            password: ${POSTGRESQL_PASSWORD}
        env:
          - name: CORS_ALLOWED_ORIGINS
            value: >-
              http://registry-http.${NAMESPACE}.${INGRESS_ROUTER_CANONICAL_HOSTNAME},
              https://registry-https.${NAMESPACE}.${INGRESS_ROUTER_CANONICAL_HOSTNAME}
      deployment:
        managedResources:
          disableIngress: true
  # cert-manager
  # Self-signed cluster issuer for the "root CA certificate"
  - apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: selfsigned-cluster-issuer
    spec:
      selfSigned: { }
  # Create the "root CA certificate"
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: selfsigned-ca
      namespace: ${NAMESPACE}
    spec:
      secretName: ca-root-secret
      duration: 17520h # 2*365*24h ~= 2 years
      isCA: true
      privateKey:
        algorithm: RSA
        encoding: PKCS1
        size: 2048
      commonName: selfsigned-ca
      issuerRef:
        group: cert-manager.io
        kind: ClusterIssuer
        name: selfsigned-cluster-issuer
  # Issuer for Ingress
  - apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: selfsigned-ca-issuer
      namespace: ${NAMESPACE}
    spec:
      ca:
        secretName: ca-root-secret
  # HTTP Ingress
  - kind: Ingress
    apiVersion: networking.k8s.io/v1
    metadata:
      name: registry-certmanager-edge-http-ingress
      namespace: ${NAMESPACE}
    spec:
      rules:
        - host: >-
            registry-http.${NAMESPACE}.${INGRESS_ROUTER_CANONICAL_HOSTNAME}
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: registry-certmanager-edge-service
                    port:
                      number: 8080
  # HTTPS Ingress
  - kind: Ingress
    apiVersion: networking.k8s.io/v1
    metadata:
      name: registry-certmanager-edge-https-ingress
      namespace: ${NAMESPACE}
      annotations:
        cert-manager.io/issuer: selfsigned-ca-issuer
    spec:
      tls:
        - hosts:
            - registry-https.${NAMESPACE}.${INGRESS_ROUTER_CANONICAL_HOSTNAME}
          secretName: registry-certmanager-edge-tls-secret
      rules:
        - host: registry-https.${NAMESPACE}.${INGRESS_ROUTER_CANONICAL_HOSTNAME}
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: registry-certmanager-edge-service
                    port:
                      number: 8080
parameters:
  - name: NAMESPACE
    required: true
  - name: POSTGRESQL_DATABASE
    value: registry
  - name: POSTGRESQL_USER
    value: apicurio
  - name: POSTGRESQL_PASSWORD
    value: password
  - name: INGRESS_ROUTER_CANONICAL_HOSTNAME
    # Find out from a status block of any Ingress or Route resource, e.g.:
    # status:
    #  loadBalancer:
    #    ingress:
    #      - hostname: router-default.apps.apicur.eastus.aroapp.io
    required: true
