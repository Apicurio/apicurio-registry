%test.quarkus.http.test-port=0

%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=${REGISTRY_DATASOURCE_URL:jdbc:h2:mem:registry_db}
%test.quarkus.datasource.username=${REGISTRY_DATASOURCE_USERNAME:sa}
%test.quarkus.datasource.password=${REGISTRY_DATASOURCE_PASSWORD:sa}

%test.registry.kafkasql.bootstrap.servers=localhost:9092
%test.registry.kafkasql.topic=kafkasql-journal
%test.registry.kafkasql.consumer.startupLag=2000
%test.registry.kafkasql.consumer.poll.timeout=100


# Kafka Security
%test.registry.kafkasql.security.sasl.enabled=${ENABLE_KAFKA_SASL:false}
%test.registry.kafkasql.security.protocol=${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
%test.registry.kafkasql.security.sasl.mechanism=OAUTHBEARER
%test.registry.kafkasql.security.sasl.client-id=${CLIENT_ID:sa}
%test.registry.kafkasql.security.sasl.client-secret=${CLIENT_SECRET:sa}
%test.registry.kafkasql.security.sasl.token.endpoint=${OAUTH_TOKEN_ENDPOINT_URI:http://localhost:8090}
%test.registry.kafkasql.security.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

## Truststore and Keystore configuration
### Minimal configuration, no client authentication is needed in the broker
%test.registry.kafkasql.security.ssl.truststore.type=${KAFKA_SSL_TRUSTSTORE_TYPE:JKS}
%test.registry.kafkasql.security.ssl.truststore.location=${KAFKA_SSL_TRUSTSTORE_LOCATION:}
%test.registry.kafkasql.ssl.truststore.password=${KAFKA_SSL_TRUSTSTORE_PASSWORD:}

### When client authentication is required, this must be set
%test.registry.kafkasql.ssl.keystore.type=${KAFKA_SSL_KEYSTORE_TYPE:JKS}
%test.registry.kafkasql.ssl.keystore.location=${KAFKA_SSL_KEYSTORE_LOCATION:}
%test.registry.kafkasql.ssl.keystore.password=${KAFKA_SSL_KEYSTORE_PASSWORD:}
%test.registry.kafkasql.ssl.key.password=${KAFKA_SSL_KEY_PASSWORD:}